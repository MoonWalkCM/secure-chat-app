// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
let currentCall = null;
let localStream = null;
let remoteStream = null;
let peerConnection = null;
let callStatusPolling = null;
let contacts = [];
let currentUser = null;
let pingInterval = null;
let callTimer = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeCalls();
});

async function initializeCalls() {
    const token = localStorage.getItem('jwtToken');
    if (!token) {
        window.location.href = '/';
        return;
    }

    try {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const decoded = JSON.parse(atob(token.split('.')[1]));
        currentUser = decoded.login;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        await loadContacts();
        
        // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–æ–≤
        startCallStatusPolling();
        
        // –ù–∞—á–∏–Ω–∞–µ–º ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
        startPing();
        
        console.log('–ó–≤–æ–Ω–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–æ–≤:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
function startPing() {
    if (pingInterval) {
        clearInterval(pingInterval);
    }
    
    pingInterval = setInterval(async () => {
        try {
            await fetch('/ping', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ ping:', error);
        }
    }, 15000);
}

// –û—á–∏—Å—Ç–∫–∞ ping –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
function stopPing() {
    if (pingInterval) {
        clearInterval(pingInterval);
        pingInterval = null;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
async function loadContacts() {
    try {
        const response = await fetch('/contacts', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            }
        });
        
        if (response.ok) {
            contacts = await response.json();
            renderContacts();
        } else {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
function renderContacts() {
    const contactsContainer = document.getElementById('contacts-list');
    if (!contactsContainer) return;

    contactsContainer.innerHTML = '';
    
    if (contacts.length === 0) {
        contactsContainer.innerHTML = `
            <div class="placeholder">
                <i class="fas fa-users"></i>
                <h3>–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–æ–≤</p>
            </div>
        `;
        return;
    }
    
    contacts.forEach(contact => {
        const contactElement = document.createElement('div');
        contactElement.className = 'contact-item';
        contactElement.innerHTML = `
            <div class="contact-info">
                <div class="contact-name">${contact.nickname || contact.login}</div>
                <div class="contact-status ${contact.is_online ? 'online' : 'offline'}">
                    ${contact.is_online ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ—Ñ–ª–∞–π–Ω'}
                </div>
            </div>
            <div class="contact-actions">
                <button class="call-btn video-call" onclick="startCall('${contact.login}', true)" ${currentCall ? 'disabled' : ''}>
                    <i class="fas fa-video"></i>
                </button>
                <button class="call-btn audio-call" onclick="startCall('${contact.login}', false)" ${currentCall ? 'disabled' : ''}>
                    <i class="fas fa-phone"></i>
                </button>
            </div>
        `;
        contactsContainer.appendChild(contactElement);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ RTCPeerConnection
function createPeerConnection() {
    const config = {
        iceServers: [
            { urls: 'stun:stun.l.google.com:19302' },
            { urls: 'stun:stun1.l.google.com:19302' }
        ]
    };
    
    const pc = new RTCPeerConnection(config);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    pc.ontrack = (event) => {
        console.log('=== –ü–û–õ–£–ß–ï–ù –£–î–ê–õ–ï–ù–ù–´–ô –ü–û–¢–û–ö ===');
        console.log('Streams:', event.streams);
        console.log('Track:', event.track);
        
        if (event.streams && event.streams.length > 0) {
            remoteStream = event.streams[0];
            const remoteVideo = document.getElementById('remote-video');
            if (remoteVideo) {
                console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ');
                remoteVideo.srcObject = remoteStream;
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –≤–∏–¥–µ–æ
                remoteVideo.onloadedmetadata = () => {
                    console.log('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º');
                    remoteVideo.play().then(() => {
                        console.log('–£–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è');
                    }).catch(e => {
                        console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', e);
                    });
                };
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                setTimeout(() => {
                    if (remoteVideo.paused) {
                        console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –≤–∏–¥–µ–æ');
                        remoteVideo.play().catch(e => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', e));
                    }
                }, 1000);
            }
        }
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    pc.onicecandidate = (event) => {
        if (event.candidate) {
            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç:', event.candidate.type);
            sendIceCandidate(event.candidate);
        }
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    pc.onconnectionstatechange = () => {
        console.log('=== –°–û–°–¢–û–Ø–ù–ò–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø:', pc.connectionState, '===');
        if (pc.connectionState === 'connected') {
            console.log('üéâ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
            updateCallStatus('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            startCallTimer();
        } else if (pc.connectionState === 'failed' || pc.connectionState === 'disconnected') {
            console.log('‚ùå WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
            updateCallStatus('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
            stopCallTimer();
        }
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    pc.oniceconnectionstatechange = () => {
        console.log('=== ICE –°–û–°–¢–û–Ø–ù–ò–ï:', pc.iceConnectionState, '===');
    };
    
    return pc;
}

// –ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞
async function startCall(recipient, withVideo) {
    try {
        console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º ${withVideo ? '–≤–∏–¥–µ–æ' : '–∞—É–¥–∏–æ'} –∑–≤–æ–Ω–æ–∫ –∫ ${recipient}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏
        const constraints = {
            audio: true,
            video: withVideo ? {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 30 }
            } : false
        };
        
        console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏:', constraints);
        localStream = await navigator.mediaDevices.getUserMedia(constraints);
        console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã');
        console.log('–¢—Ä–µ–∫–∏:', localStream.getTracks().map(t => `${t.kind}: ${t.enabled}`));
        
        // –°–æ–∑–¥–∞–µ–º RTCPeerConnection
        peerConnection = createPeerConnection();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
        localStream.getTracks().forEach(track => {
            console.log(`–î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫: ${track.kind}`);
            peerConnection.addTrack(track, localStream);
        });
        
        // –°–æ–∑–¥–∞–µ–º offer
        console.log('–°–æ–∑–¥–∞–µ–º offer...');
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º offer –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch('/call/offer', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            },
            body: JSON.stringify({
                recipient: recipient,
                offer: offer,
                withVideo: withVideo
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Offer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ, callId:', data.callId);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–≤–æ–Ω–æ–∫
            currentCall = {
                id: data.callId,
                caller: currentUser,
                recipient: recipient,
                status: 'pending',
                withVideo: withVideo
            };
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–≤–æ–Ω–∫–∞
            showCallInterface();
            updateCallStatus('–ù–∞–±–æ—Ä...');
            
            console.log('üéØ –ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω:', data.callId);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞:', error);
        alert(`–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞: ${error.message}`);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
async function sendIceCandidate(candidate) {
    if (!currentCall) return;
    
    try {
        await fetch('/call/ice-candidate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            },
            body: JSON.stringify({
                callId: currentCall.id,
                candidate: candidate
            })
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
async function endCall() {
    console.log('üîö –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫');
    
    if (currentCall) {
        try {
            await fetch('/call/end', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
                },
                body: JSON.stringify({
                    callId: currentCall.id
                })
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', error);
        }
    }
    
    // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
        localStream = null;
    }
    
    if (peerConnection) {
        peerConnection.close();
        peerConnection = null;
    }
    
    currentCall = null;
    remoteStream = null;
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
    stopCallTimer();
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–≤–æ–Ω–∫–∞
    hideCallInterface();
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
    await loadContacts();
    
    console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
async function getCallStatus(callId) {
    try {
        const response = await fetch(`/call/status/${callId}`, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            return data.callSession;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞:', error);
    }
    return null;
}

// –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–æ–≤
function startCallStatusPolling() {
    callStatusPolling = setInterval(async () => {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏
            await checkIncomingCalls();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
            if (currentCall) {
                const callStatus = await getCallStatus(currentCall.id);
                if (callStatus) {
                    handleCallStatusUpdate(callStatus);
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
                    if (callStatus.iceCandidates && callStatus.iceCandidates.length > 0) {
                        await processIceCandidates(callStatus.iceCandidates);
                    }
                } else {
                    // –ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º
                    endCall();
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–æ–≤:', error);
        }
    }, 2000);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
async function processIceCandidates(iceCandidates) {
    if (!peerConnection) return;
    
    for (const iceData of iceCandidates) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if (iceData.from !== currentUser && !iceData.processed) {
            try {
                console.log('–î–æ–±–∞–≤–ª—è–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:', iceData.candidate.type);
                await peerConnection.addIceCandidate(new RTCIceCandidate(iceData.candidate));
                iceData.processed = true; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
            }
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
async function checkIncomingCalls() {
    try {
        const response = await fetch('/call/incoming', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            }
        });
        
        if (response.ok) {
            const incomingCalls = await response.json();
            
            for (const call of incomingCalls) {
                if (call.recipient === currentUser && call.status === 'pending' && !currentCall) {
                    showIncomingCall(call);
                    break;
                }
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤:', error);
    }
}

// –ü–æ–∫–∞–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
function showIncomingCall(call) {
    console.log('üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç:', call.caller);
    
    const incomingCallHTML = `
        <div id="incoming-call-overlay" class="incoming-call-overlay">
            <div class="incoming-call-modal">
                <div class="incoming-call-info">
                    <h3>–í—Ö–æ–¥—è—â–∏–π ${call.withVideo ? '–≤–∏–¥–µ–æ' : '–∞—É–¥–∏–æ'} –∑–≤–æ–Ω–æ–∫</h3>
                    <p>–û—Ç: ${call.caller}</p>
                </div>
                <div class="incoming-call-actions">
                    <button id="accept-call-btn" class="accept-btn">
                        <i class="fas fa-phone"></i> –ü—Ä–∏–Ω—è—Ç—å
                    </button>
                    <button id="reject-call-btn" class="reject-btn">
                        <i class="fas fa-phone-slash"></i> –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                    </button>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', incomingCallHTML);
    
    document.getElementById('accept-call-btn').onclick = () => acceptIncomingCall(call);
    document.getElementById('reject-call-btn').onclick = () => rejectIncomingCall(call);
    
    playRingtone();
}

// –ü—Ä–∏–Ω—è—Ç–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
async function acceptIncomingCall(call) {
    try {
        console.log('‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫');
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏
        const constraints = {
            audio: true,
            video: call.withVideo ? {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 30 }
            } : false
        };
        
        console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏:', constraints);
        localStream = await navigator.mediaDevices.getUserMedia(constraints);
        console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã');
        console.log('–¢—Ä–µ–∫–∏:', localStream.getTracks().map(t => `${t.kind}: ${t.enabled}`));
        
        // –°–æ–∑–¥–∞–µ–º RTCPeerConnection
        peerConnection = createPeerConnection();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
        localStream.getTracks().forEach(track => {
            console.log(`–î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫: ${track.kind}`);
            peerConnection.addTrack(track, localStream);
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (offer)');
        await peerConnection.setRemoteDescription(new RTCSessionDescription(call.offer));
        console.log('‚úÖ –£–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –°–æ–∑–¥–∞–µ–º answer
        console.log('–°–æ–∑–¥–∞–µ–º answer...');
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º answer
        const response = await fetch('/call/answer', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            },
            body: JSON.stringify({
                callId: call.id,
                answer: answer
            })
        });
        
        if (response.ok) {
            console.log('‚úÖ Answer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            currentCall = {
                id: call.id,
                caller: call.caller,
                recipient: call.recipient,
                status: 'active',
                withVideo: call.withVideo
            };
            
            hideIncomingCall();
            showCallInterface();
            updateCallStatus('–ó–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞:', error);
        hideIncomingCall();
        alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞: ${error.message}`);
    }
}

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
async function rejectIncomingCall(call) {
    try {
        await fetch('/call/reject', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            },
            body: JSON.stringify({
                callId: call.id
            })
        });
        
        hideIncomingCall();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', error);
        hideIncomingCall();
    }
}

// –°–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
function hideIncomingCall() {
    const overlay = document.getElementById('incoming-call-overlay');
    if (overlay) {
        overlay.remove();
    }
    stopRingtone();
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ –∑–≤–æ–Ω–∫–∞
let ringtone = null;

function playRingtone() {
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
    oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.5);
    
    gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
    
    oscillator.start();
    oscillator.stop(audioContext.currentTime + 1);
    
    ringtone = setInterval(() => {
        const osc = audioContext.createOscillator();
        const gain = audioContext.createGain();
        
        osc.connect(gain);
        gain.connect(audioContext.destination);
        
        osc.frequency.setValueAtTime(800, audioContext.currentTime);
        osc.frequency.setValueAtTime(600, audioContext.currentTime + 0.5);
        
        gain.gain.setValueAtTime(0.3, audioContext.currentTime);
        
        osc.start();
        osc.stop(audioContext.currentTime + 1);
    }, 2000);
}

function stopRingtone() {
    if (ringtone) {
        clearInterval(ringtone);
        ringtone = null;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
function handleCallStatusUpdate(callStatus) {
    console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞:', callStatus.status);
    
    if (callStatus.status === 'rejected') {
        alert('–ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
        endCall();
    } else if (callStatus.status === 'ended') {
        alert('–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
        endCall();
    } else if (callStatus.status === 'active' && currentCall && currentCall.status === 'pending') {
        // –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç
        console.log('üéâ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
        if (callStatus.answer) {
            peerConnection.setRemoteDescription(new RTCSessionDescription(callStatus.answer))
                .then(() => {
                    console.log('‚úÖ –£–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (answer) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                    currentCall.status = 'active';
                    updateCallStatus('–ó–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω');
                })
                .catch(error => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
                    alert(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`);
                });
        }
    }
}

// –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–≤–æ–Ω–∫–∞
function showCallInterface() {
    const callInterface = document.getElementById('call-interface');
    const noCallPlaceholder = document.getElementById('no-call-placeholder');
    
    if (callInterface) {
        callInterface.style.display = 'flex';
    }
    
    if (noCallPlaceholder) {
        noCallPlaceholder.style.display = 'none';
    }
    
    const localVideo = document.getElementById('local-video');
    if (localVideo && localStream) {
        localVideo.srcObject = localStream;
        localVideo.play().catch(e => console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ:', e));
    }
}

// –°–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–≤–æ–Ω–∫–∞
function hideCallInterface() {
    const callInterface = document.getElementById('call-interface');
    const noCallPlaceholder = document.getElementById('no-call-placeholder');
    
    if (callInterface) {
        callInterface.style.display = 'none';
    }
    
    if (noCallPlaceholder) {
        noCallPlaceholder.style.display = 'flex';
    }
    
    const localVideo = document.getElementById('local-video');
    const remoteVideo = document.getElementById('remote-video');
    if (localVideo) localVideo.srcObject = null;
    if (remoteVideo) remoteVideo.srcObject = null;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
function updateCallStatus(status) {
    const statusElement = document.getElementById('call-status');
    if (statusElement) {
        statusElement.textContent = status;
    }
}

// –¢–∞–π–º–µ—Ä –∑–≤–æ–Ω–∫–∞
function startCallTimer() {
    if (callTimer) {
        clearInterval(callTimer);
    }
    
    const startTime = Date.now();
    callTimer = setInterval(() => {
        const elapsed = Date.now() - startTime;
        const minutes = Math.floor(elapsed / 60000);
        const seconds = Math.floor((elapsed % 60000) / 1000);
        updateCallStatus(`–ó–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω (${minutes}:${seconds.toString().padStart(2, '0')})`);
    }, 1000);
}

function stopCallTimer() {
    if (callTimer) {
        clearInterval(callTimer);
        callTimer = null;
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º
function toggleMute() {
    if (localStream) {
        const audioTrack = localStream.getAudioTracks()[0];
        if (audioTrack) {
            audioTrack.enabled = !audioTrack.enabled;
            const muteBtn = document.getElementById('mute-btn');
            if (muteBtn) {
                muteBtn.innerHTML = audioTrack.enabled ? '<i class="fas fa-microphone"></i>' : '<i class="fas fa-microphone-slash"></i>';
                muteBtn.style.background = audioTrack.enabled ? '#a0aec0' : '#f56565';
            }
        }
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π
function toggleVideo() {
    if (localStream) {
        const videoTrack = localStream.getVideoTracks()[0];
        if (videoTrack) {
            videoTrack.enabled = !videoTrack.enabled;
            const videoBtn = document.getElementById('video-btn');
            if (videoBtn) {
                videoBtn.innerHTML = videoTrack.enabled ? '<i class="fas fa-video"></i>' : '<i class="fas fa-video-slash"></i>';
                videoBtn.style.background = videoTrack.enabled ? '#a0aec0' : '#f56565';
            }
        }
    }
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
window.addEventListener('beforeunload', () => {
    if (currentCall) {
        endCall();
    }
    stopPing();
});

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
async function clearAllCalls() {
    try {
        const response = await fetch('/call/clear-all', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ –û—á–∏—â–µ–Ω—ã –≤—Å–µ –∑–≤–æ–Ω–∫–∏:', data.message);
            alert('–í—Å–µ –∑–≤–æ–Ω–∫–∏ –æ—á–∏—â–µ–Ω—ã!');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–≤–æ–Ω–∫–∞—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
async function getCallDebugInfo() {
    try {
        const response = await fetch('/call/debug', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–∞—Ö:', data);
            alert(`–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤: ${data.totalCalls}\n${data.calls.map(c => `${c.id}: ${c.caller}‚Üí${c.recipient} (${c.status})`).join('\n')}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–≤–æ–Ω–∫–∞—Ö:', error);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–ª–∞–¥–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
console.log('üîß –§—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏:');
console.log('- clearAllCalls() - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–≤–æ–Ω–∫–∏');
console.log('- getCallDebugInfo() - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–∞—Ö'); 
