// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let currentCall = null;
let peerConnection = null;
let localStream = null;
let remoteStream = null;
let isMuted = false;
let isVideoEnabled = true;
let isFullscreen = false;
let currentCamera = 'user'; // 'user' –∏–ª–∏ 'environment'
let callStatusPolling = null;
let incomingCallPolling = null;
let pingInterval = null;
let incomingCallShown = false;
let processedCallIds = new Set();
let pendingIceCandidates = [];

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const contactsList = document.getElementById('contactsList');
const callInterface = document.getElementById('callInterface');
const contactsSection = document.getElementById('contactsSection');
const searchInput = document.getElementById('searchInput');
const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');
const callStatus = document.getElementById('callStatus');
const remoteVideoLabel = document.getElementById('remoteVideoLabel');

// –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const muteBtn = document.getElementById('muteBtn');
const videoBtn = document.getElementById('videoBtn');
const fullscreenBtn = document.getElementById('fullscreenBtn');
const flipCameraBtn = document.getElementById('flipCameraBtn');
const endCallBtn = document.getElementById('endCallBtn');

// –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
const incomingCallOverlay = document.getElementById('incomingCallOverlay');
const incomingCallerName = document.getElementById('incomingCallerName');
const incomingCallType = document.getElementById('incomingCallType');
const acceptCallBtn = document.getElementById('acceptCallBtn');
const rejectCallBtn = document.getElementById('rejectCallBtn');

// –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
const fullscreenOverlay = document.getElementById('fullscreenOverlay');
const fullscreenRemoteVideo = document.getElementById('fullscreenRemoteVideo');
const fullscreenLocalVideo = document.getElementById('fullscreenLocalVideo');
const fsMuteBtn = document.getElementById('fsMuteBtn');
const fsVideoBtn = document.getElementById('fsVideoBtn');
const fsFlipCameraBtn = document.getElementById('fsFlipCameraBtn');
const fsEndCallBtn = document.getElementById('fsEndCallBtn');
const exitFullscreenBtn = document.getElementById('exitFullscreenBtn');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('üé• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤');
    initializeApp();
    setupEventListeners();
});

// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function initializeApp() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        const token = localStorage.getItem('jwtToken');
        if (!token) {
            window.location.href = '/';
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = localStorage.getItem('userData');
        if (userData) {
            currentUser = JSON.parse(userData);
            console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser.login);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        await loadContacts();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å—ã
        startIncomingCallPolling();
        startPingInterval();
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    searchInput?.addEventListener('input', filterContacts);
    
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–º
    muteBtn?.addEventListener('click', toggleMute);
    videoBtn?.addEventListener('click', toggleVideo);
    fullscreenBtn?.addEventListener('click', enterFullscreen);
    flipCameraBtn?.addEventListener('click', flipCamera);
    endCallBtn?.addEventListener('click', endCall);
    
    // –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º currentCall –ø—Ä–∏ –∫–ª–∏–∫–µ
    acceptCallBtn?.addEventListener('click', () => {
        if (currentCall) {
            acceptIncomingCall(currentCall);
        } else {
            console.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–∏–Ω—è—Ç—å');
        }
    });
    rejectCallBtn?.addEventListener('click', () => {
        const callId = currentCall?.id || currentCall?.callId;
        if (callId) {
            rejectIncomingCall(callId);
        } else {
            console.error('‚ùå –ù–µ—Ç ID –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å');
        }
    });
    
    // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    fsMuteBtn?.addEventListener('click', toggleMute);
    fsVideoBtn?.addEventListener('click', toggleVideo);
    fsFlipCameraBtn?.addEventListener('click', flipCamera);
    fsEndCallBtn?.addEventListener('click', endCall);
    exitFullscreenBtn?.addEventListener('click', exitFullscreen);
    
    // –í—ã—Ö–æ–¥
    document.getElementById('logoutBtn')?.addEventListener('click', logout);
    
    // –û—á–∏—Å—Ç–∫–∞ –∑–≤–æ–Ω–∫–æ–≤
    document.getElementById('clearCallsBtn')?.addEventListener('click', clearAllCalls);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
async function loadContacts() {
    try {
        const response = await fetch('/contacts', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            }
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤');
        }
        
        const contacts = await response.json();
        displayContacts(contacts);
        console.log('üìã –ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', contacts.length);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
        contactsList.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</div>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
function displayContacts(contacts) {
    if (!contactsList) return;
    
    contactsList.innerHTML = '';
    
    if (contacts.length === 0) {
        contactsList.innerHTML = '<div class="no-contacts">–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤</div>';
        return;
    }
    
    contacts.forEach(contact => {
        const contactElement = createContactElement(contact);
        contactsList.appendChild(contactElement);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
function createContactElement(contact) {
    const div = document.createElement('div');
    div.className = 'contact-item';
    
    const statusClass = contact.is_online ? 'online' : 'offline';
    const statusText = contact.is_online ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üî¥ –û—Ñ—Ñ–ª–∞–π–Ω';
    
    div.innerHTML = `
        <div class="contact-info">
            <div class="contact-name">${contact.nickname || contact.login}</div>
            <div class="contact-status ${statusClass}">${statusText}</div>
        </div>
        <div class="contact-actions">
            <button class="call-btn video-call" onclick="startVideoCall('${contact.login}')" title="–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫">
                üìπ
            </button>
            <button class="call-btn audio-call" onclick="startAudioCall('${contact.login}')" title="–ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫">
                üé§
            </button>
        </div>
    `;
    
    return div;
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
function filterContacts() {
    const searchTerm = searchInput.value.toLowerCase();
    const contactItems = contactsList.querySelectorAll('.contact-item');
    
    contactItems.forEach(item => {
        const contactName = item.querySelector('.contact-name').textContent.toLowerCase();
        if (contactName.includes(searchTerm)) {
            item.style.display = 'flex';
        } else {
            item.style.display = 'none';
        }
    });
}

// –ù–∞—á–∞–ª–æ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
async function startVideoCall(recipient) {
    try {
        console.log('üé• –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ –∫', recipient);
        
        // –°–æ–∑–¥–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        createPeerConnection();
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫
        const stream = await navigator.mediaDevices.getUserMedia({
            video: { 
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 30 }
            },
            audio: true
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
        stream.getTracks().forEach(track => {
            peerConnection.addTrack(track, stream);
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
        localStream = stream;
        localVideo.srcObject = localStream;
        localVideo.play().catch(e => console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ:', e));
        
        // –°–æ–∑–¥–∞–µ–º offer
        const offer = await peerConnection.createOffer();
        console.log('üìã –°–æ–∑–¥–∞–Ω offer:', {
            type: offer.type,
            sdpLength: offer.sdp ? offer.sdp.length : 0,
            offerKeys: Object.keys(offer),
            offerType: typeof offer
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º offer –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if (!offer || !offer.type || !offer.sdp) {
            console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ offer:', offer);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å offer');
        }
        
        await peerConnection.setLocalDescription(offer);
        console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º offer –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º offer –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', {
            recipient: recipient,
            offerType: offer.type,
            offerKeys: Object.keys(offer),
            withVideo: true
        });
        
        const response = await fetch('/call/offer', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            },
            body: JSON.stringify({
                recipient: recipient,
                offer: offer,
                withVideo: true
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const data = await response.json();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–≤–æ–Ω–æ–∫
        currentCall = {
            callId: data.callId,
            recipient: recipient,
            isIncoming: false,
            stream: stream,
            answerReceived: false,
            status: 'pending'
        };
        // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è callId ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
        flushPendingIceCandidates();
        
        console.log('‚úÖ –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω:', data.callId);
        
        // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
        startCallStatusPolling();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–≤–æ–Ω–∫–∞
        showCallInterface();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞: ' + error.message);
        endCall();
    }
}

// –ù–∞—á–∞–ª–æ –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∞
async function startAudioCall(recipient) {
    try {
        console.log('üé§ –ù–∞—á–∏–Ω–∞–µ–º –∞—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫ –∫', recipient);
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
        const stream = await navigator.mediaDevices.getUserMedia({
            audio: true,
            video: false
        });
        
        localStream = stream;
        localVideo.srcObject = stream;
        
        // –°–æ–∑–¥–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await createPeerConnection();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫
        const audioTrack = stream.getAudioTracks()[0];
        peerConnection.addTrack(audioTrack, stream);
        
        // –°–æ–∑–¥–∞–µ–º offer
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º offer –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch('/call/offer', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            },
            body: JSON.stringify({
                recipient: recipient,
                offer: offer,
                withVideo: false
            })
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞');
        }
        
        const data = await response.json();
        currentCall = {
            callId: data.callId,
            recipient: recipient,
            type: 'audio',
            status: 'pending'
        };
        flushPendingIceCandidates();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–≤–æ–Ω–∫–∞
        showCallInterface();
        startCallStatusPolling();
        
        console.log('‚úÖ –ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω:', data.callId);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∞: ' + error.message);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function createPeerConnection() {
    if (peerConnection) {
        peerConnection.close();
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å STUN —Å–µ—Ä–≤–µ—Ä–∞–º–∏
    peerConnection = new RTCPeerConnection({
        iceServers: [
            { urls: 'stun:stun.l.google.com:19302' },
            { urls: 'stun:stun1.l.google.com:19302' },
            { urls: 'stun:stun2.l.google.com:19302' },
            { urls: 'stun:stun3.l.google.com:19302' },
            { urls: 'stun:stun4.l.google.com:19302' }
        ],
        iceCandidatePoolSize: 10
    });
    
    console.log('üîó WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    peerConnection.ontrack = (event) => {
        console.log('üì∫ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫');
        
        if (event.streams && event.streams[0]) {
            remoteStream = event.streams[0];
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
            remoteVideo.srcObject = remoteStream;
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –≤–∏–¥–µ–æ
            remoteVideo.play().catch(e => {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ:', e);
                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
                setTimeout(() => {
                    remoteVideo.play().catch(e2 => console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', e2));
                }, 1000);
            });
            
            // –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
            fullscreenRemoteVideo.srcObject = remoteStream;
            fullscreenRemoteVideo.play().catch(e => {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', e);
            });
        }
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    peerConnection.onicecandidate = (event) => {
        if (event.candidate) {
            try {
                console.log('üßä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç:', event.candidate.candidate ? 'candidate' : 'end');
                enqueueIceCandidate(event.candidate);
            } catch (e) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å:', e);
            }
        }
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    peerConnection.oniceconnectionstatechange = () => {
        console.log('üßä –°–æ—Å—Ç–æ—è–Ω–∏–µ ICE:', peerConnection.iceConnectionState);
    };
    
    peerConnection.onconnectionstatechange = () => {
        console.log('üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', peerConnection.connectionState);
    };
    
    peerConnection.onicegatheringstatechange = () => {
        console.log('üßä –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±–æ—Ä–∞ ICE:', peerConnection.iceGatheringState);
    };
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function sendIceCandidate(candidate) {
    if (!currentCall || !currentCall.callId) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
    if (currentCall.status === 'ended' || currentCall.status === 'rejected') {
        console.log('‚ö†Ô∏è –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç');
        return;
    }
    
    const sendWithRetry = async (retryCount = 0) => {
        try {
            const response = await fetch('/call/ice-candidate', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
                },
                body: JSON.stringify({
                    callId: currentCall.callId,
                    candidate: candidate
                })
            });
            
            if (response.status === 404) {
                // –ù–∞ Vercel –¥—Ä—É–≥–æ–π –∏–Ω—Å—Ç–∞–Ω—Å –º–æ–∂–µ—Ç –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å. –ù–µ —Ä–æ–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫.
                console.log('‚ÑπÔ∏è –ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (404). –ü–æ–¥–æ–∂–¥–µ–º –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ.');
                throw new Error('Call not found');
            }
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            console.log('‚úÖ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
            
            if (retryCount < 3) {
                console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/3 —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...`);
                setTimeout(() => sendWithRetry(retryCount + 1), 1000);
            } else {
                console.log('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞');
            }
        }
    };
    
    await sendWithRetry();
}

// –ö–ª–∞–¥–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –±—É—Ñ–µ—Ä, –µ—Å–ª–∏ callId –µ—â–µ –Ω–µ—Ç, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
function enqueueIceCandidate(candidate) {
    if (!currentCall || !currentCall.callId) {
        pendingIceCandidates.push(candidate);
        return;
    }
    sendIceCandidate(candidate);
}

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏–ª—Å—è callId
async function flushPendingIceCandidates() {
    if (!currentCall || !currentCall.callId) return;
    if (!pendingIceCandidates.length) return;
    const toSend = pendingIceCandidates.slice();
    pendingIceCandidates = [];
    for (const candidate of toSend) {
        try {
            await sendIceCandidate(candidate);
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', e);
        }
    }
}

// –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–≤–æ–Ω–∫–∞
function showCallInterface() {
    contactsSection.style.display = 'none';
    callInterface.style.display = 'flex';
    updateCallStatus('–ù–∞–±–æ—Ä...');
}

// –°–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–≤–æ–Ω–∫–∞
function hideCallInterface() {
    contactsSection.style.display = 'block';
    callInterface.style.display = 'none';
    currentCall = null;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
function updateCallStatus(status) {
    if (callStatus) {
        callStatus.querySelector('.status-text').textContent = status;
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
function toggleMute() {
    if (!localStream) return;
    
    const audioTrack = localStream.getAudioTracks()[0];
    if (audioTrack) {
        audioTrack.enabled = !audioTrack.enabled;
        isMuted = !audioTrack.enabled;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        const muteIcon = isMuted ? 'üîá' : 'üé§';
        muteBtn.innerHTML = `<span class="btn-icon">${muteIcon}</span>`;
        if (fsMuteBtn) fsMuteBtn.innerHTML = `<span class="btn-icon">${muteIcon}</span>`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        muteBtn.classList.toggle('active', isMuted);
        if (fsMuteBtn) fsMuteBtn.classList.toggle('active', isMuted);
        
        console.log(isMuted ? 'üîá –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω' : 'üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω');
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
function toggleVideo() {
    if (!localStream) return;
    
    const videoTrack = localStream.getVideoTracks()[0];
    if (videoTrack) {
        videoTrack.enabled = !videoTrack.enabled;
        isVideoEnabled = videoTrack.enabled;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        const videoIcon = isVideoEnabled ? 'üìπ' : 'üö´';
        videoBtn.innerHTML = `<span class="btn-icon">${videoIcon}</span>`;
        if (fsVideoBtn) fsVideoBtn.innerHTML = `<span class="btn-icon">${videoIcon}</span>`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        videoBtn.classList.toggle('active', !isVideoEnabled);
        if (fsVideoBtn) fsVideoBtn.classList.toggle('active', !isVideoEnabled);
        
        console.log(isVideoEnabled ? 'üìπ –ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞' : 'üö´ –ö–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    }
}

// –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞–º–µ—Ä—ã
async function flipCamera() {
    if (!localStream) return;
    
    try {
        console.log('üîÑ –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–∏–¥–µ–æ —Ç—Ä–µ–∫
        const oldVideoTrack = localStream.getVideoTracks()[0];
        if (oldVideoTrack) {
            oldVideoTrack.stop();
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É
        currentCamera = currentCamera === 'user' ? 'environment' : 'user';
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫
        const newStream = await navigator.mediaDevices.getUserMedia({
            video: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 30 },
                facingMode: currentCamera
            }
        });
        
        const newVideoTrack = newStream.getVideoTracks()[0];
        
        // –ó–∞–º–µ–Ω—è–µ–º —Ç—Ä–µ–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
        localStream.removeTrack(oldVideoTrack);
        localStream.addTrack(newVideoTrack);
        
        // –ó–∞–º–µ–Ω—è–µ–º —Ç—Ä–µ–∫ –≤ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        const senders = peerConnection.getSenders();
        const videoSender = senders.find(sender => sender.track?.kind === 'video');
        if (videoSender) {
            videoSender.replaceTrack(newVideoTrack);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
        localVideo.srcObject = localStream;
        fullscreenLocalVideo.srcObject = localStream;
        
        console.log('‚úÖ –ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞ –Ω–∞:', currentCamera);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞–º–µ—Ä—ã:', error);
        alert('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞–º–µ—Ä—ã: ' + error.message);
    }
}

// –í—Ö–æ–¥ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
function enterFullscreen() {
    if (!remoteStream) {
        remoteStream = remoteVideo?.srcObject || remoteStream;
    }
    if (!localStream) {
        localStream = localVideo?.srcObject || localStream;
    }
    if (!remoteStream) return;
    
    isFullscreen = true;
    fullscreenOverlay.style.display = 'flex';
    
    // –ö–æ–ø–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫–∏
    fullscreenRemoteVideo.srcObject = remoteStream;
    fullscreenLocalVideo.srcObject = localStream;
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    updateFullscreenControls();
    
    console.log('‚õ∂ –í—Ö–æ–¥ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º');
}

// –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
function exitFullscreen() {
    isFullscreen = false;
    fullscreenOverlay.style.display = 'none';
    console.log('‚õ∂ –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function updateFullscreenControls() {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    const muteIcon = isMuted ? 'üîá' : 'üé§';
    const videoIcon = isVideoEnabled ? 'üìπ' : 'üö´';
    
    fsMuteBtn.innerHTML = `<span class="btn-icon">${muteIcon}</span>`;
    fsVideoBtn.innerHTML = `<span class="btn-icon">${videoIcon}</span>`;
    
    fsMuteBtn.classList.toggle('active', isMuted);
    fsVideoBtn.classList.toggle('active', !isVideoEnabled);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
async function endCall() {
    try {
        console.log('üìû –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
        if (callStatusPolling) {
            clearInterval(callStatusPolling);
            callStatusPolling = null;
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∏–Ω–≥—Ç–æ–Ω
        stopRingtone();
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        hideIncomingCall();
        
        // –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if (document.fullscreenElement) {
            await document.exitFullscreen();
            console.log('‚õ∂ –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if (currentCall && currentCall.callId) {
            try {
                const response = await fetch('/call/end', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
                    },
                    body: JSON.stringify({
                        callId: currentCall.callId
                    })
                });
                
                if (!response.ok) {
                    console.log('‚ÑπÔ∏è –ó–≤–æ–Ω–æ–∫ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
                }
            } catch (error) {
                console.log('‚ÑπÔ∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', error.message);
            }
        }
        
        // –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±—É—Ñ–µ—Ä ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        pendingIceCandidates = [];
        
        if (currentCall && currentCall.stream) {
            currentCall.stream.getTracks().forEach(track => track.stop());
        }
        
        // –û—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
        localVideo.srcObject = null;
        remoteVideo.srcObject = null;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–≤–æ–Ω–∫–∞
        hideCallInterface();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        currentCall = null;
        incomingCallShown = false;
        processedCallIds.clear();
        
        console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', error);
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
async function getCallStatus(callId) {
    try {
        const response = await fetch(`/call/status/${callId}`, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            }
        });
        
        if (response.status === 404) {
            console.log('‚ÑπÔ∏è –ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (404), –ø–æ–¥–æ–∂–¥–µ–º –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ');
            return null;
        }
        
        if (!response.ok) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', response.status);
            return null;
        }
        
        const data = await response.json();
        return data.callSession;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞:', error);
        return null;
    }
}

// –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
function startCallStatusPolling() {
    if (callStatusPolling) {
        clearInterval(callStatusPolling);
    }
    
    callStatusPolling = setInterval(async () => {
        if (!currentCall || !currentCall.callId) {
            clearInterval(callStatusPolling);
            return;
        }
        
        const callSession = await getCallStatus(currentCall.callId);
        
        if (!callSession) {
            // –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
            updateCallStatus('–ù–∞–±–æ—Ä...');
            return;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        if (callSession.status === 'rejected') {
            console.log('üìû –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
            currentCall.status = 'rejected';
            endCall();
        } else if (callSession.status === 'ended') {
            console.log('üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
            currentCall.status = 'ended';
            endCall();
        } else if (callSession.status === 'active' && callSession.answer) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫
            if (!currentCall.answerReceived) {
                console.log('üìû –°–æ–µ–¥–∏–Ω—è—é...');
                currentCall.answerReceived = true;
                currentCall.status = 'active';
                await handleCallAnswer(callSession.answer);
                updateCallStatus('–†–∞–∑–≥–æ–≤–æ—Ä –∏–¥–µ—Ç');
            }
        } else if (callSession.status === 'active' && !callSession.answer) {
            // –ù–∞ Vercel –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –ø–æ–∑–∂–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            updateCallStatus('–°–æ–µ–¥–∏–Ω—è—é...');
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ offer –∏ answer –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (callSession.offer) {
            console.log('üìã Offer –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof callSession.offer);
            if (typeof callSession.offer === 'string') {
                try {
                    const parsedOffer = JSON.parse(callSession.offer);
                    console.log('üìã Offer —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:', parsedOffer.type);
                } catch (e) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ offer –≤ —Å—Ç–∞—Ç—É—Å–µ:', e);
                    console.error('üìã –°—ã—Ä–æ–π offer:', callSession.offer);
                }
            } else {
                console.log('üìã Offer —É–∂–µ –æ–±—ä–µ–∫—Ç:', callSession.offer.type);
            }
        } else {
            console.log('‚ö†Ô∏è Offer –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
        
        if (callSession.answer) {
            console.log('üìã Answer –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof callSession.answer);
            if (typeof callSession.answer === 'string') {
                try {
                    const parsedAnswer = JSON.parse(callSession.answer);
                    console.log('üìã Answer —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:', parsedAnswer.type);
                } catch (e) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ answer –≤ —Å—Ç–∞—Ç—É—Å–µ:', e);
                    console.error('üìã –°—ã—Ä–æ–π answer:', callSession.answer);
                }
            } else {
                console.log('üìã Answer —É–∂–µ –æ–±—ä–µ–∫—Ç:', callSession.answer.type);
            }
        } else {
            console.log('‚ö†Ô∏è Answer –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
        if (callSession.iceCandidates) {
            for (const iceCandidate of callSession.iceCandidates) {
                if (!iceCandidate.processed && iceCandidate.from !== currentUser.login) {
                    try {
                        if (!peerConnection.remoteDescription) {
                            console.log('‚è≥ –ñ–¥–µ–º remoteDescription –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤');
                        }
                        await peerConnection.addIceCandidate(iceCandidate.candidate);
                        iceCandidate.processed = true;
                        console.log('‚úÖ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç:', iceCandidate.from);
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
                    }
                }
            }
        }
    }, 3000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞
function stopCallStatusPolling() {
    if (callStatusPolling) {
        clearInterval(callStatusPolling);
        callStatusPolling = null;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
async function handleCallStatusUpdate(callSession) {
    if (!callSession) return;
    
    switch (callSession.status) {
        case 'active':
            updateCallStatus('–†–∞–∑–≥–æ–≤–æ—Ä –∏–¥–µ—Ç');
            break;
        case 'ended':
        case 'rejected':
            endCall();
            break;
        case 'pending':
            updateCallStatus('–ù–∞–±–æ—Ä...');
            break;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º answer –µ—Å–ª–∏ –µ—Å—Ç—å
    if (callSession.answer && peerConnection) {
        try {
            if (!peerConnection.remoteDescription || peerConnection.signalingState !== 'stable') {
                await peerConnection.setRemoteDescription(new RTCSessionDescription(callSession.answer));
                updateCallStatus('–†–∞–∑–≥–æ–≤–æ—Ä –∏–¥–µ—Ç');
            }
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Å—Ç–∞—Ç—É—Å–∞:', e);
        }
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    if (callSession.iceCandidates && callSession.iceCandidates.length > 0) {
        callSession.iceCandidates.forEach(candidateData => {
            if (!candidateData.processed) {
                peerConnection.addIceCandidate(new RTCIceCandidate(candidateData.candidate));
                candidateData.processed = true;
            }
        });
    }
}

// –û–ø—Ä–æ—Å –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
function startIncomingCallPolling() {
    if (incomingCallPolling) {
        clearInterval(incomingCallPolling);
    }
    
    incomingCallPolling = setInterval(async () => {
        try {
            const response = await fetch('/call/incoming', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
                }
            });
            
            if (response.ok) {
                const incomingCalls = await response.json();
                if (incomingCalls.length > 0 && !incomingCallShown) {
                    const call = incomingCalls[0];
                    if (!processedCallIds.has(call.id)) {
                        showIncomingCall(call);
                        processedCallIds.add(call.id);
                    }
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤:', error);
        }
    }, 3000);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
async function checkIncomingCalls() {
    try {
        const response = await fetch('/call/incoming', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            }
        });
        
        if (!response.ok) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤:', response.status);
            return;
        }
        
        const incomingCalls = await response.json();
        
        for (const callSession of incomingCalls) {
            console.log('üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–≤–æ–Ω–æ–∫:', {
                id: callSession.id,
                caller: callSession.caller,
                hasOffer: !!callSession.offer,
                offerType: typeof callSession.offer
            });
            
            if (!incomingCallShown && !processedCallIds.has(callSession.id)) {
                console.log('üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç:', callSession.caller);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
                showIncomingCall(callSession);
                
                // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ä–∏–Ω–≥—Ç–æ–Ω
                playRingtone();
                
                // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–π
                incomingCallShown = true;
                processedCallIds.add(callSession.id);
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
                document.getElementById('acceptCallBtn').onclick = () => acceptIncomingCall(callSession);
                document.getElementById('rejectCallBtn').onclick = () => {
                    const callId = callSession.id || (currentCall && currentCall.id);
                    rejectIncomingCall(callId);
                };
                
                console.log('üîó –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –∑–≤–æ–Ω–∫–∞:', callSession.id);
                
                break; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∑–≤–æ–Ω–æ–∫
            }
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤:', error);
    }
}

// –ü–æ–∫–∞–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
function showIncomingCall(call) {
    if (incomingCallShown) return;
    
    console.log('üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç:', call.caller);
    console.log('üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞:', call);
    
    incomingCallerName.textContent = call.caller || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    incomingCallType.textContent = call.withVideo ? '–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫' : '–ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞
    currentCall = {
        id: call.id,
        caller: call.caller,
        offer: call.offer,
        withVideo: call.withVideo
    };
    
    incomingCallShown = true;
    incomingCallOverlay.style.display = 'flex';
    playRingtone();
}

// –°–∫—Ä—ã—Ç–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
function hideIncomingCall() {
    incomingCallOverlay.style.display = 'none';
    stopRingtone();
    incomingCallShown = false;
}

// –ü—Ä–∏–Ω—è—Ç–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
async function acceptIncomingCall(callSession) {
    try {
        console.log('‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç:', callSession.caller);
        console.log('üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞:', callSession);
        console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞:', {
            id: callSession.id,
            caller: callSession.caller,
            status: callSession.status,
            withVideo: callSession.withVideo,
            offerType: typeof callSession.offer,
            offerRaw: callSession.offer
        });
        
        // –ï—Å–ª–∏ –Ω–µ—Ç id, –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –µ–≥–æ –∏–∑ currentCall –∏–ª–∏ –∏–∑ DOM/—Å—Ç–∞—Ç—É—Å–∞
        if ((!callSession || !callSession.id) && currentCall && (currentCall.id || currentCall.callId)) {
            console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ currentCall –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è id');
            callSession = { ...callSession, id: currentCall.id || currentCall.callId, caller: callSession.caller || currentCall.caller, offer: callSession.offer || currentCall.offer, withVideo: callSession.withVideo ?? currentCall.withVideo };
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (!callSession.id) {
            throw new Error('ID –∑–≤–æ–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
        
        if (!callSession.caller) {
            throw new Error('–ò–º—è –∑–≤–æ–Ω—è—â–µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
        
        // –ü–∞—Ä—Å–∏–º offer –∏–∑ callSession
        let offer;
        if (typeof callSession.offer === 'string') {
            try {
                offer = JSON.parse(callSession.offer);
                console.log('‚úÖ Offer —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –∏–∑ —Å—Ç—Ä–æ–∫–∏:', offer.type);
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ offer:', e);
                console.error('üìã –°—ã—Ä–æ–π offer:', callSession.offer);
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç offer');
            }
        } else {
            offer = callSession.offer;
            console.log('‚úÖ Offer —É–∂–µ –æ–±—ä–µ–∫—Ç:', offer.type);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ offer –Ω–µ null –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if (!offer) {
            console.error('‚ùå Offer –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (null/undefined)');
            throw new Error('Offer –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
        
        if (!offer.type) {
            console.error('‚ùå Offer –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç type:', offer);
            throw new Error('Offer –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç type');
        }
        
        if (!offer.sdp) {
            console.error('‚ùå Offer –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç sdp:', offer);
            throw new Error('Offer –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç sdp');
        }
        
        console.log('‚úÖ Offer —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω:', offer.type);
        
        // –°–æ–∑–¥–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        createPeerConnection();

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–≤–æ–Ω–æ–∫ –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –±—ã–ª callId –¥–ª—è ICE
        currentCall = {
            callId: callSession.id,
            recipient: callSession.caller,
            isIncoming: true,
            stream: null,
            answerReceived: true,
            status: 'active'
        };
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫
        const stream = await navigator.mediaDevices.getUserMedia({
            video: { 
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 30 }
            },
            audio: true
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
        stream.getTracks().forEach(track => {
            peerConnection.addTrack(track, stream);
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
        localStream = stream;
        if (localVideo) {
            localVideo.srcObject = localStream;
            localVideo.play().catch(e => console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ:', e));
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
        
        // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch('/call/answer', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            },
            body: JSON.stringify({
                callId: callSession.id,
                answer: answer
            })
        });
        
        if (!response.ok) {
            // –ù–∞ Vercel –ø—Ä–∏ —Ö–æ–ª–æ–¥–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ –≤–æ–∑–º–æ–∂–Ω–∞ –∫—Ä–∞—Ç–∫–∞—è —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è, –Ω–µ —Ä–æ–Ω—è–µ–º –∑–≤–æ–Ω–æ–∫
            console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π –Ω–∞ /call/answer:', response.status);
        }
        
        // –î–æ–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–≤–æ–Ω–æ–∫ –ø–æ—Ç–æ–∫–æ–º
        currentCall.stream = stream;
        // –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ callId ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
        flushPendingIceCandidates();
        
        console.log('‚úÖ –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        hideIncomingCall();
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∏–Ω–≥—Ç–æ–Ω
        stopRingtone();
        
        // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
        startCallStatusPolling();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–≤–æ–Ω–∫–∞
        showCallInterface();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞: ' + error.message);
        endCall();
    }
}

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
async function rejectIncomingCall(callId) {
    try {
        console.log('‚ùå –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫:', callId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callId –ø–µ—Ä–µ–¥–∞–Ω
        if (!callId) {
            console.error('‚ùå ID –∑–≤–æ–Ω–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
            hideIncomingCall();
            stopRingtone();
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await fetch('/call/reject', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            },
            body: JSON.stringify({
                callId: callId
            })
        });
        
        if (!response.ok) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', response.status);
            const errorData = await response.json().catch(() => ({}));
            console.error('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorData);
        } else {
            console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
        hideIncomingCall();
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∏–Ω–≥—Ç–æ–Ω
        stopRingtone();
        
        console.log('‚úÖ –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞:', error);
    }
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
function playRingtone() {
    try {
        // –°–æ–∑–¥–∞–µ–º AudioContext —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (!window.audioContext) {
            window.audioContext = new (window.AudioContext || window.webkitAudioContext)();
        }
        
        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if (window.audioContext.state === 'suspended') {
            window.audioContext.resume();
        }
        
        const oscillator = window.audioContext.createOscillator();
        const gainNode = window.audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(window.audioContext.destination);
        
        oscillator.frequency.setValueAtTime(800, window.audioContext.currentTime);
        oscillator.frequency.setValueAtTime(600, window.audioContext.currentTime + 0.5);
        
        gainNode.gain.setValueAtTime(0, window.audioContext.currentTime);
        gainNode.gain.linearRampToValueAtTime(0.3, window.audioContext.currentTime + 0.1);
        gainNode.gain.linearRampToValueAtTime(0, window.audioContext.currentTime + 0.5);
        
        oscillator.start(window.audioContext.currentTime);
        oscillator.stop(window.audioContext.currentTime + 0.5);
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
        window.ringtoneInterval = setInterval(() => {
            if (window.audioContext.state === 'suspended') {
                window.audioContext.resume();
            }
            
            const oscillator = window.audioContext.createOscillator();
            const gainNode = window.audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(window.audioContext.destination);
            
            oscillator.frequency.setValueAtTime(800, window.audioContext.currentTime);
            oscillator.frequency.setValueAtTime(600, window.audioContext.currentTime + 0.5);
            
            gainNode.gain.setValueAtTime(0, window.audioContext.currentTime);
            gainNode.gain.linearRampToValueAtTime(0.3, window.audioContext.currentTime + 0.1);
            gainNode.gain.linearRampToValueAtTime(0, window.audioContext.currentTime + 0.5);
            
            oscillator.start(window.audioContext.currentTime);
            oscillator.stop(window.audioContext.currentTime + 0.5);
        }, 2000);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', error);
    }
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–≤–æ–Ω–∫–∞
function stopRingtone() {
    if (window.ringtoneInterval) {
        clearInterval(window.ringtoneInterval);
        window.ringtoneInterval = null;
    }
}

// Ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
function startPingInterval() {
    if (pingInterval) {
        clearInterval(pingInterval);
    }
    
    pingInterval = setInterval(async () => {
        try {
            await fetch('/ping', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
                }
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ ping:', error);
        }
    }, 15000);
}

// –í—ã—Ö–æ–¥
function logout() {
    localStorage.removeItem('jwtToken');
    localStorage.removeItem('userData');
    window.location.href = '/';
}

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤
async function clearAllCalls() {
    try {
        console.log('üßπ –û—á–∏—â–∞–µ–º –≤—Å–µ –∑–≤–æ–Ω–∫–∏...');
        
        const response = await fetch('/call/clear-all', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            alert(`‚úÖ ${data.message}`);
            console.log('‚úÖ –ó–≤–æ–Ω–∫–∏ –æ—á–∏—â–µ–Ω—ã:', data.message);
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤: ' + error.message);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫
async function handleCallAnswer(answer) {
    try {
        console.log('üìû –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫');
        
        if (peerConnection) {
            // –ü–∞—Ä—Å–∏–º answer –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—à–µ–ª –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            let answerObj;
            if (typeof answer === 'string') {
                try {
                    answerObj = JSON.parse(answer);
                } catch (e) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ answer:', e);
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç answer');
                }
            } else {
                answerObj = answer;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ answer –Ω–µ null –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if (!answerObj || !answerObj.type || !answerObj.sdp) {
                console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç answer:', answerObj);
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç answer - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç type –∏–ª–∏ sdp');
            }
            
            console.log('‚úÖ Answer —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω:', answerObj.type);
            
            await peerConnection.setRemoteDescription(new RTCSessionDescription(answerObj));
            console.log('‚úÖ –£–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫:', error);
    }
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (currentCall) {
        endCall();
    }
    if (pingInterval) {
        clearInterval(pingInterval);
    }
    if (incomingCallPolling) {
        clearInterval(incomingCallPolling);
    }
    if (callStatusPolling) {
        clearInterval(callStatusPolling);
    }
});

console.log('üé• –°–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤ —Å HTTP polling –∑–∞–≥—Ä—É–∂–µ–Ω–∞'); 
