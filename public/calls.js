// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let currentCall = null;
let peerConnection = null;
let localStream = null;
let remoteStream = null;
let isMuted = false;
let isVideoEnabled = true;
let isFullscreen = false;
let currentCamera = 'user'; // 'user' –∏–ª–∏ 'environment'
let socket = null;
let pingInterval = null;

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const contactsList = document.getElementById('contactsList');
const callInterface = document.getElementById('callInterface');
const contactsSection = document.getElementById('contactsSection');
const searchInput = document.getElementById('searchInput');
const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');
const callStatus = document.getElementById('callStatus');
const remoteVideoLabel = document.getElementById('remoteVideoLabel');

// –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const muteBtn = document.getElementById('muteBtn');
const videoBtn = document.getElementById('videoBtn');
const fullscreenBtn = document.getElementById('fullscreenBtn');
const flipCameraBtn = document.getElementById('flipCameraBtn');
const endCallBtn = document.getElementById('endCallBtn');

// –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
const incomingCallOverlay = document.getElementById('incomingCallOverlay');
const incomingCallerName = document.getElementById('incomingCallerName');
const incomingCallType = document.getElementById('incomingCallType');
const acceptCallBtn = document.getElementById('acceptCallBtn');
const rejectCallBtn = document.getElementById('rejectCallBtn');

// –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
const fullscreenOverlay = document.getElementById('fullscreenOverlay');
const fullscreenRemoteVideo = document.getElementById('fullscreenRemoteVideo');
const fullscreenLocalVideo = document.getElementById('fullscreenLocalVideo');
const fsMuteBtn = document.getElementById('fsMuteBtn');
const fsVideoBtn = document.getElementById('fsVideoBtn');
const fsFlipCameraBtn = document.getElementById('fsFlipCameraBtn');
const fsEndCallBtn = document.getElementById('fsEndCallBtn');
const exitFullscreenBtn = document.getElementById('exitFullscreenBtn');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('üé• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤');
    initializeApp();
    setupEventListeners();
});

// –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function initializeApp() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        const token = localStorage.getItem('jwtToken');
        if (!token) {
            window.location.href = '/';
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = localStorage.getItem('userData');
        if (userData) {
            currentUser = JSON.parse(userData);
            console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser.login);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket
        initializeWebSocket(token);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        await loadContacts();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º ping
        startPingInterval();
        
        console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
function initializeWebSocket(token) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è WebSocket
    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    const wsUrl = `${protocol}//${window.location.host}`;
    
    console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket:', wsUrl);
    
    socket = io(wsUrl);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ WebSocket —Å–æ–±—ã—Ç–∏–π
    socket.on('connect', () => {
        console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        socket.emit('authenticate', { token: token });
    });
    
    socket.on('disconnect', () => {
        console.log('‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
    });
    
    socket.on('connect_error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error);
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–≤–æ–Ω–∫–æ–≤
    socket.on('call:incoming', (data) => {
        console.log('üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ WebSocket:', data);
        showIncomingCall(data);
    });
    
    socket.on('call:offered', (data) => {
        console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω:', data);
        currentCall = {
            id: data.callId,
            status: 'pending'
        };
        showCallInterface();
        updateCallStatus('–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...');
    });
    
    socket.on('call:answered', (data) => {
        console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç:', data);
        if (peerConnection && peerConnection.signalingState !== 'stable') {
            peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));
        }
        updateCallStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ');
    });
    
    socket.on('call:rejected', (data) => {
        console.log('‚ùå –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω:', data);
        endCall();
    });
    
    socket.on('call:ended', (data) => {
        console.log('üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω:', data);
        endCall();
    });
    
    socket.on('call:ice-candidate', (data) => {
        console.log('üßä –ü–æ–ª—É—á–µ–Ω ICE –∫–∞–Ω–¥–∏–¥–∞—Ç:', data);
        if (peerConnection && data.from !== currentUser.login) {
            peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
        }
    });
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    searchInput?.addEventListener('input', filterContacts);
    
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–æ–º
    muteBtn?.addEventListener('click', toggleMute);
    videoBtn?.addEventListener('click', toggleVideo);
    fullscreenBtn?.addEventListener('click', enterFullscreen);
    flipCameraBtn?.addEventListener('click', flipCamera);
    endCallBtn?.addEventListener('click', endCall);
    
    // –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫
    acceptCallBtn?.addEventListener('click', acceptIncomingCall);
    rejectCallBtn?.addEventListener('click', rejectIncomingCall);
    
    // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
    fsMuteBtn?.addEventListener('click', toggleMute);
    fsVideoBtn?.addEventListener('click', toggleVideo);
    fsFlipCameraBtn?.addEventListener('click', flipCamera);
    fsEndCallBtn?.addEventListener('click', endCall);
    exitFullscreenBtn?.addEventListener('click', exitFullscreen);
    
    // –í—ã—Ö–æ–¥
    document.getElementById('logoutBtn')?.addEventListener('click', logout);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
async function loadContacts() {
    try {
        const response = await fetch('/contacts', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
            }
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤');
        }
        
        const contacts = await response.json();
        displayContacts(contacts);
        console.log('üìã –ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', contacts.length);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
        contactsList.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</div>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
function displayContacts(contacts) {
    if (!contactsList) return;
    
    contactsList.innerHTML = '';
    
    if (contacts.length === 0) {
        contactsList.innerHTML = '<div class="no-contacts">–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤</div>';
        return;
    }
    
    contacts.forEach(contact => {
        const contactElement = createContactElement(contact);
        contactsList.appendChild(contactElement);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
function createContactElement(contact) {
    const div = document.createElement('div');
    div.className = 'contact-item';
    
    const statusClass = contact.is_online ? 'online' : 'offline';
    const statusText = contact.is_online ? 'üü¢ –û–Ω–ª–∞–π–Ω' : 'üî¥ –û—Ñ—Ñ–ª–∞–π–Ω';
    
    div.innerHTML = `
        <div class="contact-info">
            <div class="contact-name">${contact.nickname || contact.login}</div>
            <div class="contact-status ${statusClass}">${statusText}</div>
        </div>
        <div class="contact-actions">
            <button class="call-btn video-call" onclick="startVideoCall('${contact.login}')" title="–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫">
                üìπ
            </button>
            <button class="call-btn audio-call" onclick="startAudioCall('${contact.login}')" title="–ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫">
                üé§
            </button>
        </div>
    `;
    
    return div;
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
function filterContacts() {
    const searchTerm = searchInput.value.toLowerCase();
    const contactItems = contactsList.querySelectorAll('.contact-item');
    
    contactItems.forEach(item => {
        const contactName = item.querySelector('.contact-name').textContent.toLowerCase();
        if (contactName.includes(searchTerm)) {
            item.style.display = 'flex';
        } else {
            item.style.display = 'none';
        }
    });
}

// –ù–∞—á–∞–ª–æ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞
async function startVideoCall(recipient) {
    try {
        console.log('üé• –ù–∞—á–∏–Ω–∞–µ–º –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ –∫', recipient);
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏
        const stream = await navigator.mediaDevices.getUserMedia({
            audio: true,
            video: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 30 }
            }
        });
        
        localStream = stream;
        localVideo.srcObject = stream;
        
        // –°–æ–∑–¥–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await createPeerConnection();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
        stream.getTracks().forEach(track => {
            peerConnection.addTrack(track, stream);
        });
        
        // –°–æ–∑–¥–∞–µ–º offer
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º offer —á–µ—Ä–µ–∑ WebSocket
        socket.emit('call:offer', {
            recipient: recipient,
            offer: offer,
            withVideo: true
        });
        
        console.log('‚úÖ –í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ WebSocket');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞: ' + error.message);
    }
}

// –ù–∞—á–∞–ª–æ –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∞
async function startAudioCall(recipient) {
    try {
        console.log('üé§ –ù–∞—á–∏–Ω–∞–µ–º –∞—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫ –∫', recipient);
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ
        const stream = await navigator.mediaDevices.getUserMedia({
            audio: true,
            video: false
        });
        
        localStream = stream;
        localVideo.srcObject = stream;
        
        // –°–æ–∑–¥–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await createPeerConnection();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫
        const audioTrack = stream.getAudioTracks()[0];
        peerConnection.addTrack(audioTrack, stream);
        
        // –°–æ–∑–¥–∞–µ–º offer
        const offer = await peerConnection.createOffer();
        await peerConnection.setLocalDescription(offer);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º offer —á–µ—Ä–µ–∑ WebSocket
        socket.emit('call:offer', {
            recipient: recipient,
            offer: offer,
            withVideo: false
        });
        
        console.log('‚úÖ –ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ WebSocket');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∞—É–¥–∏–æ–∑–≤–æ–Ω–∫–∞: ' + error.message);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async function createPeerConnection() {
    const configuration = {
        iceServers: [
            { urls: 'stun:stun.l.google.com:19302' },
            { urls: 'stun:stun1.l.google.com:19302' },
            { urls: 'stun:stun2.l.google.com:19302' }
        ],
        iceCandidatePoolSize: 10
    };
    
    peerConnection = new RTCPeerConnection(configuration);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    peerConnection.onicecandidate = (event) => {
        if (event.candidate && currentCall) {
            socket.emit('call:ice-candidate', {
                callId: currentCall.id,
                candidate: event.candidate
            });
        }
    };
    
    peerConnection.onconnectionstatechange = () => {
        console.log('üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', peerConnection.connectionState);
        updateCallStatus(peerConnection.connectionState);
    };
    
    peerConnection.oniceconnectionstatechange = () => {
        console.log('üßä –°–æ—Å—Ç–æ—è–Ω–∏–µ ICE:', peerConnection.iceConnectionState);
    };
    
    peerConnection.ontrack = (event) => {
        console.log('üì∫ –ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫');
        remoteStream = event.streams[0];
        remoteVideo.srcObject = remoteStream;
        fullscreenRemoteVideo.srcObject = remoteStream;
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        remoteVideo.play().catch(e => console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', e));
        fullscreenRemoteVideo.play().catch(e => console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', e));
    };
    
    console.log('üîó WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
}

// –ü–æ–∫–∞–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–≤–æ–Ω–∫–∞
function showCallInterface() {
    contactsSection.style.display = 'none';
    callInterface.style.display = 'flex';
    updateCallStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
}

// –°–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–≤–æ–Ω–∫–∞
function hideCallInterface() {
    contactsSection.style.display = 'block';
    callInterface.style.display = 'none';
    currentCall = null;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
function updateCallStatus(status) {
    if (callStatus) {
        callStatus.querySelector('.status-text').textContent = status;
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
function toggleMute() {
    if (!localStream) return;
    
    const audioTrack = localStream.getAudioTracks()[0];
    if (audioTrack) {
        audioTrack.enabled = !audioTrack.enabled;
        isMuted = !audioTrack.enabled;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        const muteIcon = isMuted ? 'üîá' : 'üé§';
        muteBtn.innerHTML = `<span class="btn-icon">${muteIcon}</span>`;
        fsMuteBtn.innerHTML = `<span class="btn-icon">${muteIcon}</span>`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        muteBtn.classList.toggle('active', isMuted);
        fsMuteBtn.classList.toggle('active', isMuted);
        
        console.log(isMuted ? 'üîá –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω' : 'üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω');
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
function toggleVideo() {
    if (!localStream) return;
    
    const videoTrack = localStream.getVideoTracks()[0];
    if (videoTrack) {
        videoTrack.enabled = !videoTrack.enabled;
        isVideoEnabled = videoTrack.enabled;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        const videoIcon = isVideoEnabled ? 'üìπ' : 'üö´';
        videoBtn.innerHTML = `<span class="btn-icon">${videoIcon}</span>`;
        fsVideoBtn.innerHTML = `<span class="btn-icon">${videoIcon}</span>`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        videoBtn.classList.toggle('active', !isVideoEnabled);
        fsVideoBtn.classList.toggle('active', !isVideoEnabled);
        
        console.log(isVideoEnabled ? 'üìπ –ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞' : 'üö´ –ö–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
    }
}

// –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç –∫–∞–º–µ—Ä—ã
async function flipCamera() {
    if (!localStream) return;
    
    try {
        console.log('üîÑ –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–∏–¥–µ–æ —Ç—Ä–µ–∫
        const oldVideoTrack = localStream.getVideoTracks()[0];
        if (oldVideoTrack) {
            oldVideoTrack.stop();
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É
        currentCamera = currentCamera === 'user' ? 'environment' : 'user';
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫
        const newStream = await navigator.mediaDevices.getUserMedia({
            video: {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 30 },
                facingMode: currentCamera
            }
        });
        
        const newVideoTrack = newStream.getVideoTracks()[0];
        
        // –ó–∞–º–µ–Ω—è–µ–º —Ç—Ä–µ–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        localStream.removeTrack(oldVideoTrack);
        localStream.addTrack(newVideoTrack);
        
        // –ó–∞–º–µ–Ω—è–µ–º —Ç—Ä–µ–∫ –≤ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        const senders = peerConnection.getSenders();
        const videoSender = senders.find(sender => sender.track?.kind === 'video');
        if (videoSender) {
            videoSender.replaceTrack(newVideoTrack);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
        localVideo.srcObject = localStream;
        fullscreenLocalVideo.srcObject = localStream;
        
        console.log('‚úÖ –ö–∞–º–µ—Ä–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞ –Ω–∞:', currentCamera);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞–º–µ—Ä—ã:', error);
        alert('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç–∞ –∫–∞–º–µ—Ä—ã: ' + error.message);
    }
}

// –í—Ö–æ–¥ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
function enterFullscreen() {
    if (!remoteStream) return;
    
    isFullscreen = true;
    fullscreenOverlay.style.display = 'flex';
    
    // –ö–æ–ø–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫–∏
    fullscreenRemoteVideo.srcObject = remoteStream;
    fullscreenLocalVideo.srcObject = localStream;
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    updateFullscreenControls();
    
    console.log('‚õ∂ –í—Ö–æ–¥ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º');
}

// –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
function exitFullscreen() {
    isFullscreen = false;
    fullscreenOverlay.style.display = 'none';
    console.log('‚õ∂ –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function updateFullscreenControls() {
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    const muteIcon = isMuted ? 'üîá' : 'üé§';
    const videoIcon = isVideoEnabled ? 'üìπ' : 'üö´';
    
    fsMuteBtn.innerHTML = `<span class="btn-icon">${muteIcon}</span>`;
    fsVideoBtn.innerHTML = `<span class="btn-icon">${videoIcon}</span>`;
    
    fsMuteBtn.classList.toggle('active', isMuted);
    fsVideoBtn.classList.toggle('active', !isVideoEnabled);
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
async function endCall() {
    try {
        console.log('üìû –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
            localStream = null;
        }
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }
        
        // –û—á–∏—â–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
        localVideo.srcObject = null;
        remoteVideo.srcObject = null;
        fullscreenRemoteVideo.srcObject = null;
        fullscreenLocalVideo.srcObject = null;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ WebSocket
        if (currentCall) {
            socket.emit('call:end', { callId: currentCall.id });
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        hideCallInterface();
        exitFullscreen();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        isMuted = false;
        isVideoEnabled = true;
        currentCamera = 'user';
        
        console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', error);
    }
}

// –ü–æ–∫–∞–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
function showIncomingCall(call) {
    if (incomingCallOverlay.style.display === 'block') return;
    
    console.log('üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç:', call.caller);
    
    incomingCallerName.textContent = call.caller;
    incomingCallType.textContent = call.withVideo ? '–í–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫' : '–ê—É–¥–∏–æ–∑–≤–æ–Ω–æ–∫';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞
    currentCall = {
        id: call.callId,
        caller: call.caller,
        offer: call.offer,
        withVideo: call.withVideo
    };
    
    incomingCallOverlay.style.display = 'flex';
    playRingtone();
}

// –°–∫—Ä—ã—Ç–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
function hideIncomingCall() {
    incomingCallOverlay.style.display = 'none';
    stopRingtone();
}

// –ü—Ä–∏–Ω—è—Ç–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
async function acceptIncomingCall() {
    try {
        console.log('‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫');
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏
        const stream = await navigator.mediaDevices.getUserMedia({
            audio: true,
            video: currentCall.withVideo ? {
                width: { ideal: 1280 },
                height: { ideal: 720 },
                frameRate: { ideal: 30 }
            } : false
        });
        
        localStream = stream;
        localVideo.srcObject = stream;
        
        // –°–æ–∑–¥–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await createPeerConnection();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
        stream.getTracks().forEach(track => {
            peerConnection.addTrack(track, stream);
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (offer)
        await peerConnection.setRemoteDescription(new RTCSessionDescription(currentCall.offer));
        
        // –°–æ–∑–¥–∞–µ–º answer
        const answer = await peerConnection.createAnswer();
        await peerConnection.setLocalDescription(answer);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º answer —á–µ—Ä–µ–∑ WebSocket
        socket.emit('call:answer', {
            callId: currentCall.id,
            answer: answer
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        hideIncomingCall();
        showCallInterface();
        
        console.log('‚úÖ –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞: ' + error.message);
    }
}

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
async function rejectIncomingCall() {
    try {
        console.log('‚ùå –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        socket.emit('call:reject', { callId: currentCall.id });
        
        hideIncomingCall();
        currentCall = null;
        
        console.log('‚úÖ –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', error);
    }
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
function playRingtone() {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫ –∑–≤–æ–Ω–∫–∞
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
    oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.5);
    
    gainNode.gain.setValueAtTime(0, audioContext.currentTime);
    gainNode.gain.linearRampToValueAtTime(0.3, audioContext.currentTime + 0.1);
    gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.5);
    
    oscillator.start(audioContext.currentTime);
    oscillator.stop(audioContext.currentTime + 0.5);
    
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    window.ringtoneInterval = setInterval(() => {
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
        oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.5);
        
        gainNode.gain.setValueAtTime(0, audioContext.currentTime);
        gainNode.gain.linearRampToValueAtTime(0.3, audioContext.currentTime + 0.1);
        gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.5);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.5);
    }, 2000);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–≤–æ–Ω–∫–∞
function stopRingtone() {
    if (window.ringtoneInterval) {
        clearInterval(window.ringtoneInterval);
        window.ringtoneInterval = null;
    }
}

// Ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
function startPingInterval() {
    if (pingInterval) {
        clearInterval(pingInterval);
    }
    
    pingInterval = setInterval(async () => {
        try {
            await fetch('/ping', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('jwtToken')}`
                }
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ ping:', error);
        }
    }, 15000);
}

// –í—ã—Ö–æ–¥
function logout() {
    localStorage.removeItem('jwtToken');
    localStorage.removeItem('userData');
    window.location.href = '/';
}

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (currentCall) {
        endCall();
    }
    if (pingInterval) {
        clearInterval(pingInterval);
    }
    if (socket) {
        socket.disconnect();
    }
});

console.log('üé• –°–∏—Å—Ç–µ–º–∞ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤ —Å WebSocket –∑–∞–≥—Ä—É–∂–µ–Ω–∞'); 
