const express = require('express');
const path = require('path');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const { MongoClient } = require('mongodb');

const app = express();

// –°–µ–∫—Ä–µ—Ç—ã
const JWT_SECRET = process.env.JWT_SECRET || 'mwlauncher-secret-key-2024-fixed';
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb+srv://secure-chat:iLMQjkum0b8rL5h2@cluster0.0s1thrl.mongodb.net/secure-chat?retryWrites=true&w=majority&appName=Cluster0';

// MongoDB –∫–ª–∏–µ–Ω—Ç
let db = null;
let client = null;

// In-memory storage –¥–ª—è Vercel (–≤–º–µ—Å—Ç–æ SQLite)
const users = new Map();
const messages = new Map();
const contacts = new Map();
const activeConnections = new Map(); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞

// In-memory fallback –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
const inMemoryCalls = new Map();

// Middleware
app.use(express.json({ limit: '50mb' }));
app.use(express.static(path.join(__dirname, 'public')));

// –§—É–Ω–∫—Ü–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
function generateKeyPair() {
    const { publicKey, privateKey } = crypto.generateKeyPairSync('rsa', {
        modulusLength: 2048,
        publicKeyEncoding: {
            type: 'spki',
            format: 'pem'
        },
        privateKeyEncoding: {
            type: 'pkcs8',
            format: 'pem'
        }
    });
    return { publicKey, privateKey };
}

function encryptMessage(message, publicKey) {
    const buffer = Buffer.from(message, 'utf8');
    const encrypted = crypto.publicEncrypt(publicKey, buffer);
    return encrypted.toString('base64');
}

function decryptMessage(encryptedMessage, privateKey) {
    const buffer = Buffer.from(encryptedMessage, 'base64');
    const decrypted = crypto.privateDecrypt(privateKey, buffer);
    return decrypted.toString('utf8');
}

function generateAESKey() {
    return crypto.randomBytes(32).toString('base64');
}

function encryptWithAES(data, key) {
    const iv = crypto.randomBytes(16);
    const cipher = crypto.createCipheriv('aes-256-cbc', Buffer.from(key, 'base64'), iv);
    let encrypted = cipher.update(data, 'utf8', 'base64');
    encrypted += cipher.final('base64');
    return {
        encrypted,
        iv: iv.toString('base64')
    };
}

function decryptWithAES(encryptedData, key, iv) {
    const decipher = crypto.createDecipheriv('aes-256-cbc', Buffer.from(key, 'base64'), Buffer.from(iv, 'base64'));
    let decrypted = decipher.update(encryptedData, 'base64', 'utf8');
    decrypted += decipher.final('utf8');
    return decrypted;
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
async function connectToMongoDB() {
    try {
        if (!client) {
            console.log('üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...');
            console.log('üì° URI:', MONGODB_URI.replace(/\/\/[^:]+:[^@]+@/, '//***:***@'));
            
            client = new MongoClient(MONGODB_URI, {
                serverSelectionTimeoutMS: 5000,
                connectTimeoutMS: 10000,
                socketTimeoutMS: 45000,
            });
            
            await client.connect();
            db = client.db('secure-chat');
            await db.admin().ping();
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        }
        return db;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º in-memory storage –∫–∞–∫ fallback');
        return null;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∑–≤–æ–Ω–∫–æ–≤ —Å fallback
async function getCallsCollection() {
    try {
        const database = await connectToMongoDB();
        if (database) {
            return database.collection('calls');
        } else {
            console.log('‚ö†Ô∏è MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º in-memory storage');
            return null;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error.message);
        return null;
    }
}

// –ö–æ–ª–ª–µ–∫—Ü–∏—è –±—É—Ñ–µ—Ä–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
async function getIceCollection() {
    try {
        const database = await connectToMongoDB();
        if (database) {
            return database.collection('call_ice');
        }
        return null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ICE:', error.message);
        return null;
    }
}

// –ö–æ–ª–ª–µ–∫—Ü–∏—è –±—É—Ñ–µ—Ä–∞ ANSWER
async function getAnswersCollection() {
    try {
        const database = await connectToMongoDB();
        if (database) {
            return database.collection('call_answers');
        }
        return null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ANSWERS:', error.message);
        return null;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function createTestUsers() {
    console.log('–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    const { publicKey: publicKey1, privateKey: privateKey1 } = generateKeyPair();
    const { publicKey: publicKey2, privateKey: privateKey2 } = generateKeyPair();
    const { publicKey: publicKey3, privateKey: privateKey3 } = generateKeyPair();
    
    const hashedPassword = await bcrypt.hash('test', 10);
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1
    users.set('test', {
        id: 1,
        login: 'test',
        password: hashedPassword,
        email: 'test@example.com',
        registration_key: 'test-key',
        nickname: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        theme: 'default',
        primary_color: '#82AAFF',
        level: 0,
        is_banned: 0,
        public_key: publicKey1,
        private_key: privateKey1
    });
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2
    users.set('test2', {
        id: 2,
        login: 'test2',
        password: hashedPassword,
        email: 'test2@example.com',
        registration_key: 'test-key',
        nickname: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2',
        theme: 'default',
        primary_color: '#82AAFF',
        level: 0,
        is_banned: 0,
        public_key: publicKey2,
        private_key: privateKey2
    });
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 3 (–∞–¥–º–∏–Ω)
    users.set('admin', {
        id: 3,
        login: 'admin',
        password: hashedPassword,
        email: 'admin@example.com',
        registration_key: 'admin-key',
        nickname: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        theme: 'dark',
        primary_color: '#FF6B6B',
        level: 10,
        is_banned: 0,
        public_key: publicKey3,
        private_key: privateKey3
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥—Ä—É–≥ –¥—Ä—É–≥–∞
    contacts.set('test', ['test2', 'admin']);
    contacts.set('test2', ['test', 'admin']);
    contacts.set('admin', ['test', 'test2']);
    
    console.log('–¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', Array.from(users.keys()));
    console.log('–í—Å–µ –ø–∞—Ä–æ–ª–∏: test');
}

// API Routes
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public/index.html'));
});

app.get('/main', (req, res) => {
    res.sendFile(path.join(__dirname, 'public/main.html'));
});

app.get('/chats', (req, res) => {
    res.sendFile(path.join(__dirname, 'public/chats.html'));
});

app.get('/calls', (req, res) => {
    res.sendFile(path.join(__dirname, 'public/calls.html'));
});

app.get('/profile', (req, res) => {
    res.sendFile(path.join(__dirname, 'public/profile.html'));
});

app.get('/setting', (req, res) => {
    res.sendFile(path.join(__dirname, 'public/setting.html'));
});

app.get('/register', (req, res) => {
    res.sendFile(path.join(__dirname, 'public/register.html'));
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/register', async (req, res) => {
    try {
        const { login, password, email, registration_key } = req.body;
        
        console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:', { login, email, registration_key });
        
        if (users.has(login)) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', login);
            return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }
        
        const hashedPassword = await bcrypt.hash(password, 10);
        const { publicKey, privateKey } = generateKeyPair();
        
        const user = {
            id: Date.now(),
            login,
            password: hashedPassword,
            email,
            registration_key,
            nickname: login,
            theme: 'default',
            primary_color: '#82AAFF',
            level: 0,
            is_banned: 0,
            public_key: publicKey,
            private_key: privateKey
        };
        
        users.set(login, user);
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', login);
        console.log('–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.size);
        
        const token = jwt.sign({ login }, JWT_SECRET, { expiresIn: '24h' });
        
        res.json({ 
            success: true, 
            token,
            user: {
                login: user.login,
                email: user.email,
                nickname: user.nickname,
                level: user.level,
                theme: user.theme,
                primary_color: user.primary_color
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –í—Ö–æ–¥
app.post('/login', async (req, res) => {
    try {
        const { login, password } = req.body;
        
        console.log('–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', login);
        console.log('–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏:', users.size);
        console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', Array.from(users.keys()));
        
        const user = users.get(login);
        if (!user) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', login);
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }
        
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å...');
        const isValidPassword = await bcrypt.compare(password, user.password);
        console.log('–ü–∞—Ä–æ–ª—å –≤–∞–ª–∏–¥–µ–Ω:', isValidPassword);
        
        if (!isValidPassword) {
            console.log('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', login);
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }
        
        const token = jwt.sign({ login }, JWT_SECRET, { expiresIn: '24h' });
        
        // –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –æ–Ω–ª–∞–π–Ω
        activeConnections.set(login, { timestamp: Date.now() });
        
        console.log('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', login);
        
        res.json({ 
            success: true, 
            token,
            user: {
                login: user.login,
                email: user.email,
                nickname: user.nickname,
                level: user.level,
                theme: user.theme,
                primary_color: user.primary_color
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
app.get('/messages', (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = users.get(decoded.login);
        if (!user) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const userMessages = messages.get(decoded.login) || [];
        res.json({ messages: userMessages });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
app.post('/send-message', (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const sender = users.get(decoded.login);
        if (!sender) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const { recipient, content, type = 'text' } = req.body;
        const recipientUser = users.get(recipient);
        
        if (!recipientUser) {
            return res.status(404).json({ error: '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const messageId = Date.now();
        const aesKey = generateAESKey();
        const encrypted = encryptWithAES(content, aesKey);
        
        const message = {
            id: messageId,
            sender: sender.login,
            recipient: recipient,
            content: content,
            encrypted_content: encrypted.encrypted,
            encryption_key: encryptMessage(aesKey, recipientUser.public_key),
            encryption_iv: encrypted.iv,
            type: type,
            timestamp: new Date().toISOString(),
            is_read: 0
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if (!messages.has(sender.login)) {
            messages.set(sender.login, []);
        }
        messages.get(sender.login).push(message);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        if (!messages.has(recipient)) {
            messages.set(recipient, []);
        }
        messages.get(recipient).push(message);
        
        res.json({ success: true, message });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
app.get('/contacts', (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = users.get(decoded.login);
        if (!user) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const userContacts = contacts.get(decoded.login) || [];
        const contactsList = userContacts.map(contactLogin => {
            const contactUser = users.get(contactLogin);
            const isOnline = activeConnections.has(contactLogin) && 
                           (Date.now() - activeConnections.get(contactLogin).timestamp) < 30000; // 30 —Å–µ–∫—É–Ω–¥
            return {
                login: contactLogin,
                nickname: contactUser?.nickname || contactLogin,
                is_online: isOnline
            };
        });
        
        res.json(contactsList);
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
app.post('/add-contact', (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = users.get(decoded.login);
        if (!user) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const { contact_login } = req.body;
        const contactUser = users.get(contact_login);
        
        if (!contactUser) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        if (!contacts.has(decoded.login)) {
            contacts.set(decoded.login, []);
        }
        
        if (!contacts.get(decoded.login).includes(contact_login)) {
            contacts.get(decoded.login).push(contact_login);
        }
        
        res.json({ success: true });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
app.post('/remove-contact', (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = users.get(decoded.login);
        if (!user) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const { contact_login } = req.body;
        
        if (contacts.has(decoded.login)) {
            const userContacts = contacts.get(decoded.login);
            const index = userContacts.indexOf(contact_login);
            if (index > -1) {
                userContacts.splice(index, 1);
            }
        }
        
        res.json({ success: true });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
app.post('/update-profile', (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = users.get(decoded.login);
        if (!user) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const { nickname, theme, primary_color } = req.body;
        
        if (nickname) user.nickname = nickname;
        if (theme) user.theme = theme;
        if (primary_color) user.primary_color = primary_color;
        
        res.json({ 
            success: true,
            user: {
                login: user.login,
                email: user.email,
                nickname: user.nickname,
                level: user.level,
                theme: user.theme,
                primary_color: user.primary_color
            }
        });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// === –ó–í–û–ù–ö–ò ===

// –ü–æ–ª—É—á–µ–Ω–∏–µ ICE —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è WebRTC
app.get('/ice-servers', (req, res) => {
    const iceServers = [
        {
            urls: [
                'stun:stun.l.google.com:19302',
                'stun:stun1.l.google.com:19302',
                'stun:stun2.l.google.com:19302',
                'stun:stun3.l.google.com:19302',
                'stun:stun4.l.google.com:19302'
            ]
        }
    ];
    
    res.json({ iceServers });
});

// –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞
app.post('/call/offer', async (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const caller = users.get(decoded.login);
        if (!caller) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const { recipient, offer, withVideo } = req.body;
        const recipientUser = users.get(recipient);
        
        if (!recipientUser) {
            return res.status(404).json({ error: '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const callId = Date.now().toString();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ offer –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        console.log('üìã –ü–æ–ª—É—á–µ–Ω offer –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', {
            offerType: typeof offer,
            offerKeys: offer ? Object.keys(offer) : 'null',
            hasType: offer && offer.type,
            hasSdp: offer && offer.sdp,
            typeValue: offer && offer.type,
            sdpLength: offer && offer.sdp ? offer.sdp.length : 0
        });
        
        if (!offer || !offer.type || !offer.sdp) {
            console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç offer –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', offer);
            console.error('üìã –¢–∏–ø offer:', typeof offer);
            console.error('üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ offer:', JSON.stringify(offer, null, 2));
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç offer' });
        }
        
        console.log('‚úÖ Offer –≤–∞–ª–∏–¥–µ–Ω:', {
            type: offer.type,
            sdpLength: offer.sdp ? offer.sdp.length : 0
        });
        
        const callSession = {
            id: callId,
            caller: caller.login,
            recipient: recipient,
            offer: JSON.stringify(offer), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
            withVideo: withVideo,
            status: 'pending',
            participants: [caller.login, recipient],
            timestamp: Date.now(),
            iceCandidates: []
        };
        
        console.log('üìã CallSession –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', {
            id: callSession.id,
            offerType: typeof callSession.offer,
            offerLength: callSession.offer.length
        });
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ MongoDB, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º in-memory
        const callsCollection = await getCallsCollection();
        if (callsCollection) {
            try {
                // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–≤–æ–Ω–∫–∏ (—Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç)
                const now = Date.now();
                await callsCollection.deleteMany({ timestamp: { $lt: now - 600000 } });
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
                const recipientSession = await callsCollection.findOne({
                    participants: recipient,
                    status: { $in: ['active', 'pending'] },
                    timestamp: { $gt: now - 300000 }
                });
                
                if (recipientSession) {
                    console.log('üö´ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –∑–∞–Ω—è—Ç:', recipient, '–∑–∞–Ω—è—Ç –∑–≤–æ–Ω–∫–æ–º:', recipientSession.id);
                    return res.status(409).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –∑–≤–æ–Ω–∫–æ–º' });
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ª–∏ –∑–≤–æ–Ω—è—â–∏–π —É–∂–µ –∑–≤–æ–Ω–æ–∫
                const callerSession = await callsCollection.findOne({
                    caller: caller.login,
                    status: { $in: ['active', 'pending'] },
                    timestamp: { $gt: now - 300000 }
                });
                
                if (callerSession) {
                    console.log('üö´ –ó–≤–æ–Ω—è—â–∏–π —É–∂–µ –≤ –∑–≤–æ–Ω–∫–µ:', caller.login, '–∑–≤–æ–Ω–æ–∫:', callerSession.id);
                    return res.status(409).json({ error: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫' });
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
                await callsCollection.insertOne(callSession);
                console.log('üìû –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –≤ MongoDB:', callId, '–æ—Ç', caller.login, '–∫', recipient);
            } catch (mongoError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB, –∏—Å–ø–æ–ª—å–∑—É–µ–º in-memory:', mongoError.message);
                inMemoryCalls.set(callId, callSession);
                console.log('üìû –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –≤ –ø–∞–º—è—Ç–∏:', callId, '–æ—Ç', caller.login, '–∫', recipient);
            }
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º in-memory storage
            inMemoryCalls.set(callId, callSession);
            console.log('üìû –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –≤ –ø–∞–º—è—Ç–∏:', callId, '–æ—Ç', caller.login, '–∫', recipient);
        }
        
        res.json({ 
            success: true, 
            callId: callId,
            message: '–ó–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω'
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –∑–≤–æ–Ω–∫–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û—Ç–≤–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫
app.post('/call/answer', async (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const answerer = users.get(decoded.login);
        if (!answerer) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const { callId, answer } = req.body;
        console.log('üìû –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–≤–æ–Ω–∫–∞:', callId, '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', answerer.login);
        
        let callSession = null;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ MongoDB
        const callsCollection = await getCallsCollection();
        if (callsCollection) {
            try {
                callSession = await callsCollection.findOne({ id: callId });
                if (callSession) {
                    console.log('üìû –ó–≤–æ–Ω–æ–∫ –Ω–∞–π–¥–µ–Ω –≤ MongoDB:', callId);
                    console.log('üìã –î–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞ –∏–∑ MongoDB:', {
                        id: callSession.id,
                        status: callSession.status,
                        offerType: typeof callSession.offer,
                        offerLength: callSession.offer ? callSession.offer.length : 0
                    });
                }
            } catch (mongoError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:', mongoError.message);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ MongoDB, –∏—â–µ–º –≤ –ø–∞–º—è—Ç–∏
        if (!callSession) {
            callSession = inMemoryCalls.get(callId);
            if (callSession) {
                console.log('üìû –ó–≤–æ–Ω–æ–∫ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:', callId);
            }
        }
        
        if (!callSession) {
            // –ë—É—Ñ–µ—Ä–∏–∑—É–µ–º answer, —á—Ç–æ–±—ã –¥—Ä—É–≥–æ–π –∏–Ω—Å—Ç–∞–Ω—Å —Å–º–æ–≥ –µ–≥–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å
            const answersCollection = await getAnswersCollection();
            if (answersCollection) {
                try {
                    await answersCollection.updateOne(
                        { id: callId },
                        { $set: { id: callId, answer: JSON.stringify(answer), timestamp: Date.now() } },
                        { upsert: true }
                    );
                    console.log('üì¶ Answer –∑–∞–±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∑–≤–æ–Ω–∫–∞ (–ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç):', callId);
                    return res.json({ success: true, message: '–ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç (–±—É—Ñ–µ—Ä)' });
                } catch (e) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ answer:', e.message);
                    return res.json({ success: true, message: '–ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç (fallback, –±—É—Ñ–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)' });
                }
            }
            console.log('‚ÑπÔ∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏:', callId);
            return res.json({ success: true, message: '–ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç (fallback)' });
        }
        
        if (callSession.recipient !== answerer.login) {
            console.log('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞:', answerer.login);
            return res.status(403).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –∑–≤–æ–Ω–æ–∫' });
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ answer –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if (!answer || !answer.type || !answer.sdp) {
            console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç answer –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', answer);
            return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç answer' });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–≤–æ–Ω–æ–∫
        if (callsCollection) {
            try {
                await callsCollection.updateOne(
                    { id: callId },
                    { 
                        $set: { 
                            answer: JSON.stringify(answer), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
                            status: 'active'
                        }
                    }
                );
                console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç –≤ MongoDB:', callId, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', answerer.login);
                // –£–¥–∞–ª—è–µ–º –±—É—Ñ–µ—Ä, –µ—Å–ª–∏ –±—ã–ª
                try {
                    const answersCollection = await getAnswersCollection();
                    if (answersCollection) await answersCollection.deleteOne({ id: callId });
                } catch {}
            } catch (mongoError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞:', mongoError.message);
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –∫–∞–∫ fallback
                callSession.answer = JSON.stringify(answer); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
                callSession.status = 'active';
                inMemoryCalls.set(callId, callSession);
                console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç –≤ –ø–∞–º—è—Ç–∏:', callId, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', answerer.login);
            }
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            callSession.answer = JSON.stringify(answer); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫—É
            callSession.status = 'active';
            inMemoryCalls.set(callId, callSession);
            console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç –≤ –ø–∞–º—è—Ç–∏:', callId, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', answerer.login);
        }
        
        res.json({ 
            success: true, 
            message: '–ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç'
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
app.post('/call/reject', async (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const rejecter = users.get(decoded.login);
        if (!rejecter) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const { callId } = req.body;
        console.log('üìû –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞:', callId, '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', rejecter.login);
        
        let callSession = null;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ MongoDB
        const callsCollection = await getCallsCollection();
        if (callsCollection) {
            try {
                callSession = await callsCollection.findOne({ id: callId });
                if (callSession) {
                    console.log('üìû –ó–≤–æ–Ω–æ–∫ –Ω–∞–π–¥–µ–Ω –≤ MongoDB –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', callId);
                }
            } catch (mongoError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', mongoError.message);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ MongoDB, –∏—â–µ–º –≤ –ø–∞–º—è—Ç–∏
        if (!callSession) {
            callSession = inMemoryCalls.get(callId);
            if (callSession) {
                console.log('üìû –ó–≤–æ–Ω–æ–∫ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', callId);
            }
        }
        
        if (!callSession) {
            console.log('‚ùå –ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', callId);
            return res.status(404).json({ error: '–ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        if (callSession.recipient !== rejecter.login) {
            console.log('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', rejecter.login);
            return res.status(403).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–≤–æ–Ω–∫–∞' });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ MongoDB
        if (callsCollection) {
            try {
                await callsCollection.updateOne(
                    { id: callId },
                    { $set: { status: 'rejected' } }
                );
                console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω –≤ MongoDB:', callId, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', rejecter.login);
            } catch (mongoError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞:', mongoError.message);
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –∫–∞–∫ fallback
                callSession.status = 'rejected';
                inMemoryCalls.set(callId, callSession);
                console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω –≤ –ø–∞–º—è—Ç–∏:', callId, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', rejecter.login);
            }
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            callSession.status = 'rejected';
            inMemoryCalls.set(callId, callSession);
            console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω –≤ –ø–∞–º—è—Ç–∏:', callId, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', rejecter.login);
        }
        
        res.json({ 
            success: true, 
            message: '–ó–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω'
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
app.post('/call/end', async (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const ender = users.get(decoded.login);
        if (!ender) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const { callId } = req.body;
        console.log('üìû –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞:', callId, '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ender.login);
        
        let callSession = null;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ MongoDB
        const callsCollection = await getCallsCollection();
        if (callsCollection) {
            try {
                callSession = await callsCollection.findOne({ id: callId });
                if (callSession) {
                    console.log('üìû –ó–≤–æ–Ω–æ–∫ –Ω–∞–π–¥–µ–Ω –≤ MongoDB –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', callId);
                }
            } catch (mongoError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', mongoError.message);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ MongoDB, –∏—â–µ–º –≤ –ø–∞–º—è—Ç–∏
        if (!callSession) {
            callSession = inMemoryCalls.get(callId);
            if (callSession) {
                console.log('üìû –ó–≤–æ–Ω–æ–∫ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', callId);
            }
        }
        
        if (!callSession) {
            console.log('‚ùå –ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', callId);
            return res.status(404).json({ error: '–ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        if (!callSession.participants.includes(ender.login)) {
            console.log('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', ender.login);
            return res.status(403).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–≤–æ–Ω–∫–∞' });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ MongoDB
        if (callsCollection) {
            try {
                await callsCollection.updateOne(
                    { id: callId },
                    { $set: { status: 'ended' } }
                );
                console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ MongoDB:', callId, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', ender.login);
            } catch (mongoError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞:', mongoError.message);
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –∫–∞–∫ fallback
                callSession.status = 'ended';
                inMemoryCalls.set(callId, callSession);
                console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ –ø–∞–º—è—Ç–∏:', callId, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', ender.login);
            }
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            callSession.status = 'ended';
            inMemoryCalls.set(callId, callSession);
            console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ –ø–∞–º—è—Ç–∏:', callId, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', ender.login);
        }
        
        res.json({ 
            success: true, 
            message: '–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω'
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
app.post('/call/ice-candidate', async (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const sender = users.get(decoded.login);
        if (!sender) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const { callId, candidate } = req.body;
        
        let callSession = null;
        let storedIn = 'memory';
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ MongoDB
        const callsCollection = await getCallsCollection();
        if (callsCollection) {
            try {
                callSession = await callsCollection.findOne({ id: callId });
                if (callSession) {
                    storedIn = 'mongo';
                }
            } catch (mongoError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–≤–æ–Ω–∫–∞ –¥–ª—è ICE:', mongoError.message);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ MongoDB, –∏—â–µ–º –≤ –ø–∞–º—è—Ç–∏
        if (!callSession) {
            callSession = inMemoryCalls.get(callId);
            storedIn = 'memory';
        }
        
        // –ï—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω (–¥—Ä—É–≥–æ–π –∏–Ω—Å—Ç–∞–Ω—Å/—Ö–æ–ª–æ–¥–Ω—ã–π —Å—Ç–∞—Ä—Ç), –≤—Å–µ —Ä–∞–≤–Ω–æ –±—É—Ñ–µ—Ä–∏–∑—É–µ–º ICE
        // –ü—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤ —ç—Ç–æ–º —Ä–µ–¥–∫–æ–º —Å–ª—É—á–∞–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        // –ù–∞ —Å—Ç–∞–¥–∏–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –±—É–¥–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
        
        // –î–æ–±–∞–≤–ª—è–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–±—É—Ñ–µ—Ä–∏–∑—É–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
        const iceCandidate = {
            callId,
            from: sender.login,
            candidate,
            timestamp: Date.now(),
            processed: false
        };

        const iceCollection = await getIceCollection();
        if (iceCollection) {
            try {
                await iceCollection.insertOne(iceCandidate);
                console.log('ICE –∫–∞–Ω–¥–∏–¥–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ MongoDB –±—É—Ñ–µ—Ä–µ –æ—Ç:', sender.login, '–¥–ª—è –∑–≤–æ–Ω–∫–∞:', callId, '—Ç–∏–ø:', candidate.type);
            } catch (mongoError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB –ø—Ä–∏ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', mongoError.message);
                // Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –≤–Ω—É—Ç—Ä–∏ callSession
                if (!callSession) {
                    callSession = {
                        id: callId,
                        participants: [sender.login],
                        status: 'pending',
                        timestamp: Date.now(),
                        iceCandidates: []
                    };
                }
                if (!callSession.iceCandidates) callSession.iceCandidates = [];
                callSession.iceCandidates.push(iceCandidate);
                inMemoryCalls.set(callId, callSession);
                console.log('ICE –∫–∞–Ω–¥–∏–¥–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç–∏ (fallback) –æ—Ç:', sender.login, '–¥–ª—è –∑–≤–æ–Ω–∫–∞:', callId, '—Ç–∏–ø:', candidate.type);
            }
        } else {
            if (!callSession) {
                callSession = {
                    id: callId,
                    participants: [sender.login],
                    status: 'pending',
                    timestamp: Date.now(),
                    iceCandidates: []
                };
            }
            if (!callSession.iceCandidates) callSession.iceCandidates = [];
            callSession.iceCandidates.push(iceCandidate);
            inMemoryCalls.set(callId, callSession);
            console.log('ICE –∫–∞–Ω–¥–∏–¥–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç–∏ –æ—Ç:', sender.login, '–¥–ª—è –∑–≤–æ–Ω–∫–∞:', callId, '—Ç–∏–ø:', candidate.type);
        }
        
        res.json({ 
            success: true, 
            message: 'ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–ª—É—á–µ–Ω'
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
app.get('/call/incoming', async (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = users.get(decoded.login);
        if (!user) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        console.log('üîç –ó–∞–ø—Ä–æ—Å –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.login);
        
        let incomingCalls = [];
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ MongoDB
        const callsCollection = await getCallsCollection();
        if (callsCollection) {
            try {
                const now = Date.now();
                const mongoCalls = await callsCollection.find({
                    recipient: user.login,
                    status: 'pending',
                    timestamp: { $gt: now - 300000 } // –ó–≤–æ–Ω–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
                }).toArray();
                
                incomingCalls = mongoCalls.map(call => ({
                    id: call.id,
                    caller: call.caller,
                    offer: call.offer,
                    withVideo: call.withVideo,
                    timestamp: call.timestamp
                }));
                
                console.log('üìû –ù–∞–π–¥–µ–Ω–æ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –≤ MongoDB:', incomingCalls.length);
            } catch (mongoError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤:', mongoError.message);
            }
        }
        
        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–∞–º—è—Ç–∏
        for (const [callId, callSession] of inMemoryCalls.entries()) {
            if (callSession.recipient === user.login && 
                callSession.status === 'pending' && 
                callSession.timestamp > Date.now() - 300000) {
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –ª–∏ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ
                if (!incomingCalls.find(call => call.id === callId)) {
                    incomingCalls.push({
                        id: callSession.id,
                        caller: callSession.caller,
                        offer: callSession.offer,
                        withVideo: callSession.withVideo,
                        timestamp: callSession.timestamp
                    });
                }
            }
        }
        
        console.log('üìû –í—Å–µ–≥–æ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤:', incomingCalls.length);
        
        res.json(incomingCalls);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
app.get('/call/status/:callId', async (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = users.get(decoded.login);
        if (!user) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const { callId } = req.params;
        console.log('üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞:', callId, '–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.login);
        
        let callSession = null;
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ MongoDB
        const callsCollection = await getCallsCollection();
        if (callsCollection) {
            try {
                callSession = await callsCollection.findOne({ id: callId });
            } catch (mongoError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–≤–æ–Ω–∫–∞:', mongoError.message);
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ MongoDB, –∏—â–µ–º –≤ –ø–∞–º—è—Ç–∏
        if (!callSession) {
            callSession = inMemoryCalls.get(callId);
            if (callSession) {
                console.log('üìû –ó–≤–æ–Ω–æ–∫ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏:', callId);
            }
        }
        
        if (!callSession) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º pending, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ —Ä–æ–Ω—è–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            console.log('‚ÑπÔ∏è –ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º pending:', callId);
            return res.json({ success: true, callSession: { id: callId, status: 'pending', iceCandidates: [] } });
        }
        
        if (!callSession.participants.includes(user.login)) {
            console.log('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∑–≤–æ–Ω–∫–∞:', user.login);
            return res.status(403).json({ error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∑–≤–æ–Ω–∫–∞' });
        }
        
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω:', callSession.status);
        
        // –°–æ–±–∏—Ä–∞–µ–º —Ç–∞–∫–∂–µ –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –∏ –æ—á–∏—â–∞–µ–º –∏—Ö
        let bufferedIce = [];
        try {
            const iceCollection = await getIceCollection();
            if (iceCollection) {
                bufferedIce = await iceCollection.find({ callId }).toArray();
                if (bufferedIce.length > 0) {
                    await iceCollection.deleteMany({ callId });
                    console.log('üì¶ –í—ã–¥–∞–Ω–æ –∏ –æ—á–∏—â–µ–Ω–æ –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:', bufferedIce.length, '–¥–ª—è', callId);
                }
            }
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∫–∏ –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:', e.message);
        }

        // –ü–∞—Ä—Å–∏–º offer –±–µ–∑–æ–ø–∞—Å–Ω–æ
        let parsedOffer = null;
        if (callSession.offer) {
            try {
                const parsed = JSON.parse(callSession.offer);
                parsedOffer = (parsed && parsed.type && parsed.sdp) ? parsed : null;
                if (!parsedOffer) {
                    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ offer –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:', parsed);
                } else {
                    console.log('‚úÖ Offer —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω –¥–ª—è API:', parsedOffer.type);
                }
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ offer:', e);
                console.error('üìã –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ offer:', callSession.offer);
            }
        }

        // –ü–∞—Ä—Å–∏–º answer –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        let parsedAnswer = null;
        if (callSession.answer) {
            try {
                const parsed = JSON.parse(callSession.answer);
                parsedAnswer = (parsed && parsed.type && parsed.sdp) ? parsed : null;
                if (!parsedAnswer) {
                    console.error('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ answer –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:', parsed);
                }
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ answer:', e);
            }
        }
        if (!parsedAnswer) {
            try {
                const answersCollection = await getAnswersCollection();
                if (answersCollection) {
                    const doc = await answersCollection.findOne({ id: callId });
                    if (doc && doc.answer) {
                        const parsed = JSON.parse(doc.answer);
                        parsedAnswer = (parsed && parsed.type && parsed.sdp) ? parsed : null;
                    }
                }
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ answer:', e.message);
            }
        }

        res.json({ 
            success: true, 
            callSession: {
                id: callSession.id,
                status: callSession.status,
                caller: callSession.caller,
                recipient: callSession.recipient,
                withVideo: callSession.withVideo,
                offer: parsedOffer,
                answer: parsedAnswer,
                iceCandidates: [
                    ...((callSession.iceCandidates) ? callSession.iceCandidates : []),
                    ...bufferedIce.map(item => ({ from: item.from, candidate: item.candidate, timestamp: item.timestamp, processed: false }))
                ]
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/call/incoming', async (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = users.get(decoded.login);
        if (!user) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        let userCalls = [];
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ MongoDB
        const callsCollection = await getCallsCollection();
        if (callsCollection) {
            try {
                userCalls = await callsCollection.find({
                    recipient: user.login,
                    status: 'pending'
                }).toArray();
            } catch (mongoError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ MongoDB –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤:', mongoError.message);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–æ–Ω–∫–∏ –∏–∑ –ø–∞–º—è—Ç–∏
        for (const [callId, callSession] of inMemoryCalls.entries()) {
            if (callSession.recipient === user.login && callSession.status === 'pending') {
                userCalls.push(callSession);
            }
        }
        
        if (userCalls.length > 0) {
            console.log('üìû –í—Ö–æ–¥—è—â–∏–µ –∑–≤–æ–Ω–∫–∏ –¥–ª—è', user.login, ':', userCalls.length);
            console.log('üìã ID –∑–≤–æ–Ω–∫–æ–≤:', userCalls.map(call => call.id));
        }
        
        res.json(userCalls);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
app.post('/call/clear-all', async (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = users.get(decoded.login);
        if (!user) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        let deletedCount = 0;
        
        // –û—á–∏—â–∞–µ–º MongoDB
        const callsCollection = await getCallsCollection();
        if (callsCollection) {
            try {
                const result = await callsCollection.deleteMany({});
                deletedCount += result.deletedCount;
            } catch (mongoError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ MongoDB:', mongoError.message);
            }
        }
        
        // –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
        const memoryCount = inMemoryCalls.size;
        inMemoryCalls.clear();
        deletedCount += memoryCount;
        
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.login} –æ—á–∏—Å—Ç–∏–ª –≤—Å–µ –∑–≤–æ–Ω–∫–∏ (${deletedCount} —à—Ç.)`);
        
        res.json({ success: true, message: `–û—á–∏—â–µ–Ω–æ ${deletedCount} –∑–≤–æ–Ω–∫–æ–≤` });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
app.get('/search-user', (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = users.get(decoded.login);
        if (!user) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const { nickname } = req.query;
        if (!nickname) {
            return res.status(400).json({ error: '–ù–∏–∫–Ω–µ–π–º –Ω–µ —É–∫–∞–∑–∞–Ω' });
        }
        
        const searchResults = [];
        for (const [login, userData] of users.entries()) {
            if (login !== decoded.login && // –ò—Å–∫–ª—é—á–∞–µ–º —Å–µ–±—è
                (userData.nickname?.toLowerCase().includes(nickname.toLowerCase()) ||
                 login.toLowerCase().includes(nickname.toLowerCase()))) {
                searchResults.push({
                    login: userData.login,
                    nickname: userData.nickname || userData.login,
                    email: userData.email
                });
            }
        }
        
        res.json(searchResults);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ –ª–æ–≥–∏–Ω—É
app.delete('/contacts/:login', (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = users.get(decoded.login);
        if (!user) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const contactLogin = req.params.login;
        
        if (contacts.has(decoded.login)) {
            const userContacts = contacts.get(decoded.login);
            const index = userContacts.indexOf(contactLogin);
            if (index > -1) {
                userContacts.splice(index, 1);
            }
        }
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/report/:login', (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = users.get(decoded.login);
        if (!user) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        const reportedLogin = req.params.login;
        const { reason } = req.body;
        
        if (!users.has(reportedLogin)) {
            return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∞–ª–æ–±
        console.log(`–ñ–∞–ª–æ–±–∞ –æ—Ç ${decoded.login} –Ω–∞ ${reportedLogin}: ${reason}`);
        
        res.json({ success: true, message: '–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ (–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
app.post('/ping', (req, res) => {
    try {
        const token = req.headers.authorization?.replace('Bearer ', '');
        if (!token) {
            return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
        }
        
        const decoded = jwt.verify(token, JWT_SECRET);
        const user = users.get(decoded.login);
        if (!user) {
            return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activeConnections.set(decoded.login, { timestamp: Date.now() });
        
        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ ping:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
createTestUsers();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MongoDB –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
connectToMongoDB().then(() => {
    console.log('üöÄ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å MongoDB (–∏–ª–∏ in-memory fallback)');
}).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MongoDB:', error);
});

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
setInterval(async () => {
    try {
        const callsCollection = await getCallsCollection();
        if (callsCollection) {
            const now = Date.now();
            const result = await callsCollection.deleteMany({ 
                timestamp: { $lt: now - 1800000 } // 30 –º–∏–Ω—É—Ç
            });
            if (result.deletedCount > 0) {
                console.log(`üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω–æ ${result.deletedCount} —Å—Ç–∞—Ä—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ MongoDB`);
            }
        }
        
        // –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º in-memory –∑–≤–æ–Ω–∫–∏
        const now = Date.now();
        let deletedInMemory = 0;
        for (const [callId, callSession] of inMemoryCalls.entries()) {
            if (now - callSession.timestamp > 1800000) { // 30 –º–∏–Ω—É—Ç
                inMemoryCalls.delete(callId);
                deletedInMemory++;
            }
        }
        if (deletedInMemory > 0) {
            console.log(`üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω–æ ${deletedInMemory} —Å—Ç–∞—Ä—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏–∑ –ø–∞–º—è—Ç–∏`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∑–≤–æ–Ω–∫–æ–≤:', error);
    }
}, 600000); // –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

module.exports = app; 
